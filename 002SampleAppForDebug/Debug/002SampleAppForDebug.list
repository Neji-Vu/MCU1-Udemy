
002SampleAppForDebug.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001578  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  08001718  08001718  00011718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001854  08001854  000200a4  2**0
                  CONTENTS
  4 .ARM          00000000  08001854  08001854  000200a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001854  08001854  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001854  08001854  00011854  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001858  08001858  00011858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  0800185c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  200000a4  08001900  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  08001900  00020210  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200ce  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000ac2  00000000  00000000  00020111  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000003de  00000000  00000000  00020bd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000138  00000000  00000000  00020fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000d7  00000000  00000000  000210f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002ba0  00000000  00000000  000211c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000015c2  00000000  00000000  00023d67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000979b  00000000  00000000  00025329  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000e58  00000000  00000000  0002eac4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  0002f91c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000a4 	.word	0x200000a4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001700 	.word	0x08001700

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000a8 	.word	0x200000a8
 80001dc:	08001700 	.word	0x08001700

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <array_fill_numbers>:
int numbers[] = { 456,345,678,567,890,456,3456,123,765,456,896,456,678,987,000,145,90};

int  someData = 90;

void array_fill_numbers(int pNumbers[], unsigned int len)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b084      	sub	sp, #16
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
 8000288:	6039      	str	r1, [r7, #0]

    for ( unsigned int i = 0 ; i < len ; i++)
 800028a:	2300      	movs	r3, #0
 800028c:	60fb      	str	r3, [r7, #12]
 800028e:	e015      	b.n	80002bc <array_fill_numbers+0x3c>
    {
        pNumbers[i] = rand() % 1000;
 8000290:	f000 fa08 	bl	80006a4 <rand>
 8000294:	4602      	mov	r2, r0
 8000296:	68fb      	ldr	r3, [r7, #12]
 8000298:	009b      	lsls	r3, r3, #2
 800029a:	6879      	ldr	r1, [r7, #4]
 800029c:	4419      	add	r1, r3
 800029e:	4b0c      	ldr	r3, [pc, #48]	; (80002d0 <array_fill_numbers+0x50>)
 80002a0:	fb83 0302 	smull	r0, r3, r3, r2
 80002a4:	1198      	asrs	r0, r3, #6
 80002a6:	17d3      	asrs	r3, r2, #31
 80002a8:	1ac3      	subs	r3, r0, r3
 80002aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002ae:	fb00 f303 	mul.w	r3, r0, r3
 80002b2:	1ad3      	subs	r3, r2, r3
 80002b4:	600b      	str	r3, [r1, #0]
    for ( unsigned int i = 0 ; i < len ; i++)
 80002b6:	68fb      	ldr	r3, [r7, #12]
 80002b8:	3301      	adds	r3, #1
 80002ba:	60fb      	str	r3, [r7, #12]
 80002bc:	68fa      	ldr	r2, [r7, #12]
 80002be:	683b      	ldr	r3, [r7, #0]
 80002c0:	429a      	cmp	r2, r3
 80002c2:	d3e5      	bcc.n	8000290 <array_fill_numbers+0x10>
    }

}
 80002c4:	bf00      	nop
 80002c6:	bf00      	nop
 80002c8:	3710      	adds	r7, #16
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}
 80002ce:	bf00      	nop
 80002d0:	10624dd3 	.word	0x10624dd3

080002d4 <display_numbers>:

void display_numbers(int *pNumbers, unsigned int len, char *pMessage)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b086      	sub	sp, #24
 80002d8:	af00      	add	r7, sp, #0
 80002da:	60f8      	str	r0, [r7, #12]
 80002dc:	60b9      	str	r1, [r7, #8]
 80002de:	607a      	str	r2, [r7, #4]
    printf("%s",pMessage);
 80002e0:	6879      	ldr	r1, [r7, #4]
 80002e2:	480e      	ldr	r0, [pc, #56]	; (800031c <display_numbers+0x48>)
 80002e4:	f000 fade 	bl	80008a4 <iprintf>

    for (unsigned i = 0 ; i < len ; i++)
 80002e8:	2300      	movs	r3, #0
 80002ea:	617b      	str	r3, [r7, #20]
 80002ec:	e00b      	b.n	8000306 <display_numbers+0x32>
    {
        printf("%5d  ",pNumbers[i]);
 80002ee:	697b      	ldr	r3, [r7, #20]
 80002f0:	009b      	lsls	r3, r3, #2
 80002f2:	68fa      	ldr	r2, [r7, #12]
 80002f4:	4413      	add	r3, r2
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	4619      	mov	r1, r3
 80002fa:	4809      	ldr	r0, [pc, #36]	; (8000320 <display_numbers+0x4c>)
 80002fc:	f000 fad2 	bl	80008a4 <iprintf>
    for (unsigned i = 0 ; i < len ; i++)
 8000300:	697b      	ldr	r3, [r7, #20]
 8000302:	3301      	adds	r3, #1
 8000304:	617b      	str	r3, [r7, #20]
 8000306:	697a      	ldr	r2, [r7, #20]
 8000308:	68bb      	ldr	r3, [r7, #8]
 800030a:	429a      	cmp	r2, r3
 800030c:	d3ef      	bcc.n	80002ee <display_numbers+0x1a>
    }

    printf("\n");
 800030e:	200a      	movs	r0, #10
 8000310:	f000 fada 	bl	80008c8 <putchar>
}
 8000314:	bf00      	nop
 8000316:	3718      	adds	r7, #24
 8000318:	46bd      	mov	sp, r7
 800031a:	bd80      	pop	{r7, pc}
 800031c:	08001718 	.word	0x08001718
 8000320:	0800171c 	.word	0x0800171c

08000324 <swap_numbers>:


void swap_numbers(int *x,int *y)
{
 8000324:	b480      	push	{r7}
 8000326:	b085      	sub	sp, #20
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
 800032c:	6039      	str	r1, [r7, #0]
     int temp=*x;
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	60fb      	str	r3, [r7, #12]
     *x=*y;
 8000334:	683b      	ldr	r3, [r7, #0]
 8000336:	681a      	ldr	r2, [r3, #0]
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	601a      	str	r2, [r3, #0]
     *y=temp;
 800033c:	683b      	ldr	r3, [r7, #0]
 800033e:	68fa      	ldr	r2, [r7, #12]
 8000340:	601a      	str	r2, [r3, #0]
     void (*jump_addr) (void);
     jump_addr = (void*)0x20000009;
     jump_addr();
#endif

     someData = 10;
 8000342:	4b04      	ldr	r3, [pc, #16]	; (8000354 <swap_numbers+0x30>)
 8000344:	220a      	movs	r2, #10
 8000346:	601a      	str	r2, [r3, #0]
}
 8000348:	bf00      	nop
 800034a:	3714      	adds	r7, #20
 800034c:	46bd      	mov	sp, r7
 800034e:	bc80      	pop	{r7}
 8000350:	4770      	bx	lr
 8000352:	bf00      	nop
 8000354:	20000044 	.word	0x20000044

08000358 <bubble_sort>:


void bubble_sort(int *pNumbers , unsigned int len)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b086      	sub	sp, #24
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
 8000360:	6039      	str	r1, [r7, #0]

    int i,j,flag=0;
 8000362:	2300      	movs	r3, #0
 8000364:	60fb      	str	r3, [r7, #12]

    for(i=0;i<len-1;i++)
 8000366:	2300      	movs	r3, #0
 8000368:	617b      	str	r3, [r7, #20]
 800036a:	e02f      	b.n	80003cc <bubble_sort+0x74>
    {
        flag=0;
 800036c:	2300      	movs	r3, #0
 800036e:	60fb      	str	r3, [r7, #12]

        for(j=0;j<len-1-i;j++)
 8000370:	2300      	movs	r3, #0
 8000372:	613b      	str	r3, [r7, #16]
 8000374:	e01d      	b.n	80003b2 <bubble_sort+0x5a>
        {
            if(pNumbers[j] > pNumbers[j+1])
 8000376:	693b      	ldr	r3, [r7, #16]
 8000378:	009b      	lsls	r3, r3, #2
 800037a:	687a      	ldr	r2, [r7, #4]
 800037c:	4413      	add	r3, r2
 800037e:	681a      	ldr	r2, [r3, #0]
 8000380:	693b      	ldr	r3, [r7, #16]
 8000382:	3301      	adds	r3, #1
 8000384:	009b      	lsls	r3, r3, #2
 8000386:	6879      	ldr	r1, [r7, #4]
 8000388:	440b      	add	r3, r1
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	429a      	cmp	r2, r3
 800038e:	dd0d      	ble.n	80003ac <bubble_sort+0x54>
            {
                swap_numbers(&pNumbers[j],&pNumbers[j+1]);
 8000390:	693b      	ldr	r3, [r7, #16]
 8000392:	009b      	lsls	r3, r3, #2
 8000394:	687a      	ldr	r2, [r7, #4]
 8000396:	18d0      	adds	r0, r2, r3
 8000398:	693b      	ldr	r3, [r7, #16]
 800039a:	3301      	adds	r3, #1
 800039c:	009b      	lsls	r3, r3, #2
 800039e:	687a      	ldr	r2, [r7, #4]
 80003a0:	4413      	add	r3, r2
 80003a2:	4619      	mov	r1, r3
 80003a4:	f7ff ffbe 	bl	8000324 <swap_numbers>
                flag=1;
 80003a8:	2301      	movs	r3, #1
 80003aa:	60fb      	str	r3, [r7, #12]
        for(j=0;j<len-1-i;j++)
 80003ac:	693b      	ldr	r3, [r7, #16]
 80003ae:	3301      	adds	r3, #1
 80003b0:	613b      	str	r3, [r7, #16]
 80003b2:	697b      	ldr	r3, [r7, #20]
 80003b4:	683a      	ldr	r2, [r7, #0]
 80003b6:	1ad3      	subs	r3, r2, r3
 80003b8:	1e5a      	subs	r2, r3, #1
 80003ba:	693b      	ldr	r3, [r7, #16]
 80003bc:	429a      	cmp	r2, r3
 80003be:	d8da      	bhi.n	8000376 <bubble_sort+0x1e>
            }
        }

        if(flag==0)
 80003c0:	68fb      	ldr	r3, [r7, #12]
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d008      	beq.n	80003d8 <bubble_sort+0x80>
    for(i=0;i<len-1;i++)
 80003c6:	697b      	ldr	r3, [r7, #20]
 80003c8:	3301      	adds	r3, #1
 80003ca:	617b      	str	r3, [r7, #20]
 80003cc:	683b      	ldr	r3, [r7, #0]
 80003ce:	1e5a      	subs	r2, r3, #1
 80003d0:	697b      	ldr	r3, [r7, #20]
 80003d2:	429a      	cmp	r2, r3
 80003d4:	d8ca      	bhi.n	800036c <bubble_sort+0x14>
            break;
    }
}
 80003d6:	e000      	b.n	80003da <bubble_sort+0x82>
            break;
 80003d8:	bf00      	nop
}
 80003da:	bf00      	nop
 80003dc:	3718      	adds	r7, #24
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}

080003e2 <insertion_sort>:

void insertion_sort(int *pNumbers , unsigned int len)
{
 80003e2:	b480      	push	{r7}
 80003e4:	b087      	sub	sp, #28
 80003e6:	af00      	add	r7, sp, #0
 80003e8:	6078      	str	r0, [r7, #4]
 80003ea:	6039      	str	r1, [r7, #0]

     int i,j,num;

     for(i=1 ; i<len ; i++)
 80003ec:	2301      	movs	r3, #1
 80003ee:	617b      	str	r3, [r7, #20]
 80003f0:	e02c      	b.n	800044c <insertion_sort+0x6a>
     {
         j=i-1;
 80003f2:	697b      	ldr	r3, [r7, #20]
 80003f4:	3b01      	subs	r3, #1
 80003f6:	613b      	str	r3, [r7, #16]

         num = pNumbers[i];
 80003f8:	697b      	ldr	r3, [r7, #20]
 80003fa:	009b      	lsls	r3, r3, #2
 80003fc:	687a      	ldr	r2, [r7, #4]
 80003fe:	4413      	add	r3, r2
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	60fb      	str	r3, [r7, #12]

         while( (j>-1) && (pNumbers[j] > num) )
 8000404:	e00d      	b.n	8000422 <insertion_sort+0x40>
         {
             pNumbers[j+1] = pNumbers[j];
 8000406:	693b      	ldr	r3, [r7, #16]
 8000408:	009b      	lsls	r3, r3, #2
 800040a:	687a      	ldr	r2, [r7, #4]
 800040c:	441a      	add	r2, r3
 800040e:	693b      	ldr	r3, [r7, #16]
 8000410:	3301      	adds	r3, #1
 8000412:	009b      	lsls	r3, r3, #2
 8000414:	6879      	ldr	r1, [r7, #4]
 8000416:	440b      	add	r3, r1
 8000418:	6812      	ldr	r2, [r2, #0]
 800041a:	601a      	str	r2, [r3, #0]
             j--;
 800041c:	693b      	ldr	r3, [r7, #16]
 800041e:	3b01      	subs	r3, #1
 8000420:	613b      	str	r3, [r7, #16]
         while( (j>-1) && (pNumbers[j] > num) )
 8000422:	693b      	ldr	r3, [r7, #16]
 8000424:	2b00      	cmp	r3, #0
 8000426:	db07      	blt.n	8000438 <insertion_sort+0x56>
 8000428:	693b      	ldr	r3, [r7, #16]
 800042a:	009b      	lsls	r3, r3, #2
 800042c:	687a      	ldr	r2, [r7, #4]
 800042e:	4413      	add	r3, r2
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	68fa      	ldr	r2, [r7, #12]
 8000434:	429a      	cmp	r2, r3
 8000436:	dbe6      	blt.n	8000406 <insertion_sort+0x24>
         }

         pNumbers[j+1]=num;
 8000438:	693b      	ldr	r3, [r7, #16]
 800043a:	3301      	adds	r3, #1
 800043c:	009b      	lsls	r3, r3, #2
 800043e:	687a      	ldr	r2, [r7, #4]
 8000440:	4413      	add	r3, r2
 8000442:	68fa      	ldr	r2, [r7, #12]
 8000444:	601a      	str	r2, [r3, #0]
     for(i=1 ; i<len ; i++)
 8000446:	697b      	ldr	r3, [r7, #20]
 8000448:	3301      	adds	r3, #1
 800044a:	617b      	str	r3, [r7, #20]
 800044c:	697b      	ldr	r3, [r7, #20]
 800044e:	683a      	ldr	r2, [r7, #0]
 8000450:	429a      	cmp	r2, r3
 8000452:	d8ce      	bhi.n	80003f2 <insertion_sort+0x10>
     }


}
 8000454:	bf00      	nop
 8000456:	bf00      	nop
 8000458:	371c      	adds	r7, #28
 800045a:	46bd      	mov	sp, r7
 800045c:	bc80      	pop	{r7}
 800045e:	4770      	bx	lr

08000460 <main>:



int main()
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b082      	sub	sp, #8
 8000464:	af00      	add	r7, sp, #0

    unsigned int len = sizeof(numbers)/sizeof(int);
 8000466:	2311      	movs	r3, #17
 8000468:	607b      	str	r3, [r7, #4]

    array_fill_numbers(numbers,len);
 800046a:	6879      	ldr	r1, [r7, #4]
 800046c:	4813      	ldr	r0, [pc, #76]	; (80004bc <main+0x5c>)
 800046e:	f7ff ff07 	bl	8000280 <array_fill_numbers>

    display_numbers(numbers,len,"B-unsorted array :");
 8000472:	4a13      	ldr	r2, [pc, #76]	; (80004c0 <main+0x60>)
 8000474:	6879      	ldr	r1, [r7, #4]
 8000476:	4811      	ldr	r0, [pc, #68]	; (80004bc <main+0x5c>)
 8000478:	f7ff ff2c 	bl	80002d4 <display_numbers>

    bubble_sort(numbers,len);
 800047c:	6879      	ldr	r1, [r7, #4]
 800047e:	480f      	ldr	r0, [pc, #60]	; (80004bc <main+0x5c>)
 8000480:	f7ff ff6a 	bl	8000358 <bubble_sort>

    display_numbers(numbers,len,"B-sorted array   :");
 8000484:	4a0f      	ldr	r2, [pc, #60]	; (80004c4 <main+0x64>)
 8000486:	6879      	ldr	r1, [r7, #4]
 8000488:	480c      	ldr	r0, [pc, #48]	; (80004bc <main+0x5c>)
 800048a:	f7ff ff23 	bl	80002d4 <display_numbers>

    array_fill_numbers(numbers,len);
 800048e:	6879      	ldr	r1, [r7, #4]
 8000490:	480a      	ldr	r0, [pc, #40]	; (80004bc <main+0x5c>)
 8000492:	f7ff fef5 	bl	8000280 <array_fill_numbers>

    display_numbers(numbers,len,"I-unsorted array :");
 8000496:	4a0c      	ldr	r2, [pc, #48]	; (80004c8 <main+0x68>)
 8000498:	6879      	ldr	r1, [r7, #4]
 800049a:	4808      	ldr	r0, [pc, #32]	; (80004bc <main+0x5c>)
 800049c:	f7ff ff1a 	bl	80002d4 <display_numbers>

    insertion_sort(numbers,len);
 80004a0:	6879      	ldr	r1, [r7, #4]
 80004a2:	4806      	ldr	r0, [pc, #24]	; (80004bc <main+0x5c>)
 80004a4:	f7ff ff9d 	bl	80003e2 <insertion_sort>

    display_numbers(numbers,len,"I-sorted array   :");
 80004a8:	4a08      	ldr	r2, [pc, #32]	; (80004cc <main+0x6c>)
 80004aa:	6879      	ldr	r1, [r7, #4]
 80004ac:	4803      	ldr	r0, [pc, #12]	; (80004bc <main+0x5c>)
 80004ae:	f7ff ff11 	bl	80002d4 <display_numbers>



    return 0;
 80004b2:	2300      	movs	r3, #0
}
 80004b4:	4618      	mov	r0, r3
 80004b6:	3708      	adds	r7, #8
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bd80      	pop	{r7, pc}
 80004bc:	20000000 	.word	0x20000000
 80004c0:	08001724 	.word	0x08001724
 80004c4:	08001738 	.word	0x08001738
 80004c8:	0800174c 	.word	0x0800174c
 80004cc:	08001760 	.word	0x08001760

080004d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  return 1;
 80004d4:	2301      	movs	r3, #1
}
 80004d6:	4618      	mov	r0, r3
 80004d8:	46bd      	mov	sp, r7
 80004da:	bc80      	pop	{r7}
 80004dc:	4770      	bx	lr

080004de <_kill>:

int _kill(int pid, int sig)
{
 80004de:	b580      	push	{r7, lr}
 80004e0:	b082      	sub	sp, #8
 80004e2:	af00      	add	r7, sp, #0
 80004e4:	6078      	str	r0, [r7, #4]
 80004e6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80004e8:	f000 fa88 	bl	80009fc <__errno>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2216      	movs	r2, #22
 80004f0:	601a      	str	r2, [r3, #0]
  return -1;
 80004f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80004f6:	4618      	mov	r0, r3
 80004f8:	3708      	adds	r7, #8
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}

080004fe <_exit>:

void _exit (int status)
{
 80004fe:	b580      	push	{r7, lr}
 8000500:	b082      	sub	sp, #8
 8000502:	af00      	add	r7, sp, #0
 8000504:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000506:	f04f 31ff 	mov.w	r1, #4294967295
 800050a:	6878      	ldr	r0, [r7, #4]
 800050c:	f7ff ffe7 	bl	80004de <_kill>
  while (1) {}    /* Make sure we hang here */
 8000510:	e7fe      	b.n	8000510 <_exit+0x12>

08000512 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000512:	b580      	push	{r7, lr}
 8000514:	b086      	sub	sp, #24
 8000516:	af00      	add	r7, sp, #0
 8000518:	60f8      	str	r0, [r7, #12]
 800051a:	60b9      	str	r1, [r7, #8]
 800051c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800051e:	2300      	movs	r3, #0
 8000520:	617b      	str	r3, [r7, #20]
 8000522:	e00a      	b.n	800053a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000524:	f3af 8000 	nop.w
 8000528:	4601      	mov	r1, r0
 800052a:	68bb      	ldr	r3, [r7, #8]
 800052c:	1c5a      	adds	r2, r3, #1
 800052e:	60ba      	str	r2, [r7, #8]
 8000530:	b2ca      	uxtb	r2, r1
 8000532:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000534:	697b      	ldr	r3, [r7, #20]
 8000536:	3301      	adds	r3, #1
 8000538:	617b      	str	r3, [r7, #20]
 800053a:	697a      	ldr	r2, [r7, #20]
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	429a      	cmp	r2, r3
 8000540:	dbf0      	blt.n	8000524 <_read+0x12>
  }

  return len;
 8000542:	687b      	ldr	r3, [r7, #4]
}
 8000544:	4618      	mov	r0, r3
 8000546:	3718      	adds	r7, #24
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}

0800054c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b086      	sub	sp, #24
 8000550:	af00      	add	r7, sp, #0
 8000552:	60f8      	str	r0, [r7, #12]
 8000554:	60b9      	str	r1, [r7, #8]
 8000556:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000558:	2300      	movs	r3, #0
 800055a:	617b      	str	r3, [r7, #20]
 800055c:	e009      	b.n	8000572 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800055e:	68bb      	ldr	r3, [r7, #8]
 8000560:	1c5a      	adds	r2, r3, #1
 8000562:	60ba      	str	r2, [r7, #8]
 8000564:	781b      	ldrb	r3, [r3, #0]
 8000566:	4618      	mov	r0, r3
 8000568:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800056c:	697b      	ldr	r3, [r7, #20]
 800056e:	3301      	adds	r3, #1
 8000570:	617b      	str	r3, [r7, #20]
 8000572:	697a      	ldr	r2, [r7, #20]
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	429a      	cmp	r2, r3
 8000578:	dbf1      	blt.n	800055e <_write+0x12>
  }
  return len;
 800057a:	687b      	ldr	r3, [r7, #4]
}
 800057c:	4618      	mov	r0, r3
 800057e:	3718      	adds	r7, #24
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}

08000584 <_close>:

int _close(int file)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800058c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000590:	4618      	mov	r0, r3
 8000592:	370c      	adds	r7, #12
 8000594:	46bd      	mov	sp, r7
 8000596:	bc80      	pop	{r7}
 8000598:	4770      	bx	lr

0800059a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800059a:	b480      	push	{r7}
 800059c:	b083      	sub	sp, #12
 800059e:	af00      	add	r7, sp, #0
 80005a0:	6078      	str	r0, [r7, #4]
 80005a2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80005a4:	683b      	ldr	r3, [r7, #0]
 80005a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005aa:	605a      	str	r2, [r3, #4]
  return 0;
 80005ac:	2300      	movs	r3, #0
}
 80005ae:	4618      	mov	r0, r3
 80005b0:	370c      	adds	r7, #12
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bc80      	pop	{r7}
 80005b6:	4770      	bx	lr

080005b8 <_isatty>:

int _isatty(int file)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80005c0:	2301      	movs	r3, #1
}
 80005c2:	4618      	mov	r0, r3
 80005c4:	370c      	adds	r7, #12
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bc80      	pop	{r7}
 80005ca:	4770      	bx	lr

080005cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	60f8      	str	r0, [r7, #12]
 80005d4:	60b9      	str	r1, [r7, #8]
 80005d6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80005d8:	2300      	movs	r3, #0
}
 80005da:	4618      	mov	r0, r3
 80005dc:	3714      	adds	r7, #20
 80005de:	46bd      	mov	sp, r7
 80005e0:	bc80      	pop	{r7}
 80005e2:	4770      	bx	lr

080005e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b086      	sub	sp, #24
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005ec:	4a14      	ldr	r2, [pc, #80]	; (8000640 <_sbrk+0x5c>)
 80005ee:	4b15      	ldr	r3, [pc, #84]	; (8000644 <_sbrk+0x60>)
 80005f0:	1ad3      	subs	r3, r2, r3
 80005f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005f4:	697b      	ldr	r3, [r7, #20]
 80005f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005f8:	4b13      	ldr	r3, [pc, #76]	; (8000648 <_sbrk+0x64>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d102      	bne.n	8000606 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000600:	4b11      	ldr	r3, [pc, #68]	; (8000648 <_sbrk+0x64>)
 8000602:	4a12      	ldr	r2, [pc, #72]	; (800064c <_sbrk+0x68>)
 8000604:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000606:	4b10      	ldr	r3, [pc, #64]	; (8000648 <_sbrk+0x64>)
 8000608:	681a      	ldr	r2, [r3, #0]
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	4413      	add	r3, r2
 800060e:	693a      	ldr	r2, [r7, #16]
 8000610:	429a      	cmp	r2, r3
 8000612:	d207      	bcs.n	8000624 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000614:	f000 f9f2 	bl	80009fc <__errno>
 8000618:	4603      	mov	r3, r0
 800061a:	220c      	movs	r2, #12
 800061c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800061e:	f04f 33ff 	mov.w	r3, #4294967295
 8000622:	e009      	b.n	8000638 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000624:	4b08      	ldr	r3, [pc, #32]	; (8000648 <_sbrk+0x64>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800062a:	4b07      	ldr	r3, [pc, #28]	; (8000648 <_sbrk+0x64>)
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	4413      	add	r3, r2
 8000632:	4a05      	ldr	r2, [pc, #20]	; (8000648 <_sbrk+0x64>)
 8000634:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000636:	68fb      	ldr	r3, [r7, #12]
}
 8000638:	4618      	mov	r0, r3
 800063a:	3718      	adds	r7, #24
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20020000 	.word	0x20020000
 8000644:	00000400 	.word	0x00000400
 8000648:	200000c0 	.word	0x200000c0
 800064c:	20000210 	.word	0x20000210

08000650 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000650:	480d      	ldr	r0, [pc, #52]	; (8000688 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000652:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000654:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000658:	480c      	ldr	r0, [pc, #48]	; (800068c <LoopForever+0x6>)
  ldr r1, =_edata
 800065a:	490d      	ldr	r1, [pc, #52]	; (8000690 <LoopForever+0xa>)
  ldr r2, =_sidata
 800065c:	4a0d      	ldr	r2, [pc, #52]	; (8000694 <LoopForever+0xe>)
  movs r3, #0
 800065e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000660:	e002      	b.n	8000668 <LoopCopyDataInit>

08000662 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000662:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000664:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000666:	3304      	adds	r3, #4

08000668 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000668:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800066a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800066c:	d3f9      	bcc.n	8000662 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800066e:	4a0a      	ldr	r2, [pc, #40]	; (8000698 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000670:	4c0a      	ldr	r4, [pc, #40]	; (800069c <LoopForever+0x16>)
  movs r3, #0
 8000672:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000674:	e001      	b.n	800067a <LoopFillZerobss>

08000676 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000676:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000678:	3204      	adds	r2, #4

0800067a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800067a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800067c:	d3fb      	bcc.n	8000676 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800067e:	f000 f9c3 	bl	8000a08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000682:	f7ff feed 	bl	8000460 <main>

08000686 <LoopForever>:

LoopForever:
  b LoopForever
 8000686:	e7fe      	b.n	8000686 <LoopForever>
  ldr   r0, =_estack
 8000688:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800068c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000690:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8000694:	0800185c 	.word	0x0800185c
  ldr r2, =_sbss
 8000698:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 800069c:	20000210 	.word	0x20000210

080006a0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006a0:	e7fe      	b.n	80006a0 <ADC_IRQHandler>
	...

080006a4 <rand>:
 80006a4:	4b16      	ldr	r3, [pc, #88]	; (8000700 <rand+0x5c>)
 80006a6:	b510      	push	{r4, lr}
 80006a8:	681c      	ldr	r4, [r3, #0]
 80006aa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80006ac:	b9b3      	cbnz	r3, 80006dc <rand+0x38>
 80006ae:	2018      	movs	r0, #24
 80006b0:	f000 fa3a 	bl	8000b28 <malloc>
 80006b4:	4602      	mov	r2, r0
 80006b6:	6320      	str	r0, [r4, #48]	; 0x30
 80006b8:	b920      	cbnz	r0, 80006c4 <rand+0x20>
 80006ba:	4b12      	ldr	r3, [pc, #72]	; (8000704 <rand+0x60>)
 80006bc:	4812      	ldr	r0, [pc, #72]	; (8000708 <rand+0x64>)
 80006be:	2152      	movs	r1, #82	; 0x52
 80006c0:	f000 f9ca 	bl	8000a58 <__assert_func>
 80006c4:	4911      	ldr	r1, [pc, #68]	; (800070c <rand+0x68>)
 80006c6:	4b12      	ldr	r3, [pc, #72]	; (8000710 <rand+0x6c>)
 80006c8:	e9c0 1300 	strd	r1, r3, [r0]
 80006cc:	4b11      	ldr	r3, [pc, #68]	; (8000714 <rand+0x70>)
 80006ce:	6083      	str	r3, [r0, #8]
 80006d0:	230b      	movs	r3, #11
 80006d2:	8183      	strh	r3, [r0, #12]
 80006d4:	2100      	movs	r1, #0
 80006d6:	2001      	movs	r0, #1
 80006d8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80006dc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80006de:	480e      	ldr	r0, [pc, #56]	; (8000718 <rand+0x74>)
 80006e0:	690b      	ldr	r3, [r1, #16]
 80006e2:	694c      	ldr	r4, [r1, #20]
 80006e4:	4a0d      	ldr	r2, [pc, #52]	; (800071c <rand+0x78>)
 80006e6:	4358      	muls	r0, r3
 80006e8:	fb02 0004 	mla	r0, r2, r4, r0
 80006ec:	fba3 3202 	umull	r3, r2, r3, r2
 80006f0:	3301      	adds	r3, #1
 80006f2:	eb40 0002 	adc.w	r0, r0, r2
 80006f6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80006fa:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80006fe:	bd10      	pop	{r4, pc}
 8000700:	200000a0 	.word	0x200000a0
 8000704:	08001773 	.word	0x08001773
 8000708:	0800178a 	.word	0x0800178a
 800070c:	abcd330e 	.word	0xabcd330e
 8000710:	e66d1234 	.word	0xe66d1234
 8000714:	0005deec 	.word	0x0005deec
 8000718:	5851f42d 	.word	0x5851f42d
 800071c:	4c957f2d 	.word	0x4c957f2d

08000720 <std>:
 8000720:	2300      	movs	r3, #0
 8000722:	b510      	push	{r4, lr}
 8000724:	4604      	mov	r4, r0
 8000726:	e9c0 3300 	strd	r3, r3, [r0]
 800072a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800072e:	6083      	str	r3, [r0, #8]
 8000730:	8181      	strh	r1, [r0, #12]
 8000732:	6643      	str	r3, [r0, #100]	; 0x64
 8000734:	81c2      	strh	r2, [r0, #14]
 8000736:	6183      	str	r3, [r0, #24]
 8000738:	4619      	mov	r1, r3
 800073a:	2208      	movs	r2, #8
 800073c:	305c      	adds	r0, #92	; 0x5c
 800073e:	f000 f90e 	bl	800095e <memset>
 8000742:	4b0d      	ldr	r3, [pc, #52]	; (8000778 <std+0x58>)
 8000744:	6263      	str	r3, [r4, #36]	; 0x24
 8000746:	4b0d      	ldr	r3, [pc, #52]	; (800077c <std+0x5c>)
 8000748:	62a3      	str	r3, [r4, #40]	; 0x28
 800074a:	4b0d      	ldr	r3, [pc, #52]	; (8000780 <std+0x60>)
 800074c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800074e:	4b0d      	ldr	r3, [pc, #52]	; (8000784 <std+0x64>)
 8000750:	6323      	str	r3, [r4, #48]	; 0x30
 8000752:	4b0d      	ldr	r3, [pc, #52]	; (8000788 <std+0x68>)
 8000754:	6224      	str	r4, [r4, #32]
 8000756:	429c      	cmp	r4, r3
 8000758:	d006      	beq.n	8000768 <std+0x48>
 800075a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800075e:	4294      	cmp	r4, r2
 8000760:	d002      	beq.n	8000768 <std+0x48>
 8000762:	33d0      	adds	r3, #208	; 0xd0
 8000764:	429c      	cmp	r4, r3
 8000766:	d105      	bne.n	8000774 <std+0x54>
 8000768:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800076c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000770:	f000 b96e 	b.w	8000a50 <__retarget_lock_init_recursive>
 8000774:	bd10      	pop	{r4, pc}
 8000776:	bf00      	nop
 8000778:	080008d9 	.word	0x080008d9
 800077c:	080008fb 	.word	0x080008fb
 8000780:	08000933 	.word	0x08000933
 8000784:	08000957 	.word	0x08000957
 8000788:	200000c4 	.word	0x200000c4

0800078c <stdio_exit_handler>:
 800078c:	4a02      	ldr	r2, [pc, #8]	; (8000798 <stdio_exit_handler+0xc>)
 800078e:	4903      	ldr	r1, [pc, #12]	; (800079c <stdio_exit_handler+0x10>)
 8000790:	4803      	ldr	r0, [pc, #12]	; (80007a0 <stdio_exit_handler+0x14>)
 8000792:	f000 b869 	b.w	8000868 <_fwalk_sglue>
 8000796:	bf00      	nop
 8000798:	20000048 	.word	0x20000048
 800079c:	08001339 	.word	0x08001339
 80007a0:	20000054 	.word	0x20000054

080007a4 <cleanup_stdio>:
 80007a4:	6841      	ldr	r1, [r0, #4]
 80007a6:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <cleanup_stdio+0x34>)
 80007a8:	4299      	cmp	r1, r3
 80007aa:	b510      	push	{r4, lr}
 80007ac:	4604      	mov	r4, r0
 80007ae:	d001      	beq.n	80007b4 <cleanup_stdio+0x10>
 80007b0:	f000 fdc2 	bl	8001338 <_fflush_r>
 80007b4:	68a1      	ldr	r1, [r4, #8]
 80007b6:	4b09      	ldr	r3, [pc, #36]	; (80007dc <cleanup_stdio+0x38>)
 80007b8:	4299      	cmp	r1, r3
 80007ba:	d002      	beq.n	80007c2 <cleanup_stdio+0x1e>
 80007bc:	4620      	mov	r0, r4
 80007be:	f000 fdbb 	bl	8001338 <_fflush_r>
 80007c2:	68e1      	ldr	r1, [r4, #12]
 80007c4:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <cleanup_stdio+0x3c>)
 80007c6:	4299      	cmp	r1, r3
 80007c8:	d004      	beq.n	80007d4 <cleanup_stdio+0x30>
 80007ca:	4620      	mov	r0, r4
 80007cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007d0:	f000 bdb2 	b.w	8001338 <_fflush_r>
 80007d4:	bd10      	pop	{r4, pc}
 80007d6:	bf00      	nop
 80007d8:	200000c4 	.word	0x200000c4
 80007dc:	2000012c 	.word	0x2000012c
 80007e0:	20000194 	.word	0x20000194

080007e4 <global_stdio_init.part.0>:
 80007e4:	b510      	push	{r4, lr}
 80007e6:	4b0b      	ldr	r3, [pc, #44]	; (8000814 <global_stdio_init.part.0+0x30>)
 80007e8:	4c0b      	ldr	r4, [pc, #44]	; (8000818 <global_stdio_init.part.0+0x34>)
 80007ea:	4a0c      	ldr	r2, [pc, #48]	; (800081c <global_stdio_init.part.0+0x38>)
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	4620      	mov	r0, r4
 80007f0:	2200      	movs	r2, #0
 80007f2:	2104      	movs	r1, #4
 80007f4:	f7ff ff94 	bl	8000720 <std>
 80007f8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80007fc:	2201      	movs	r2, #1
 80007fe:	2109      	movs	r1, #9
 8000800:	f7ff ff8e 	bl	8000720 <std>
 8000804:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000808:	2202      	movs	r2, #2
 800080a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800080e:	2112      	movs	r1, #18
 8000810:	f7ff bf86 	b.w	8000720 <std>
 8000814:	200001fc 	.word	0x200001fc
 8000818:	200000c4 	.word	0x200000c4
 800081c:	0800078d 	.word	0x0800078d

08000820 <__sfp_lock_acquire>:
 8000820:	4801      	ldr	r0, [pc, #4]	; (8000828 <__sfp_lock_acquire+0x8>)
 8000822:	f000 b916 	b.w	8000a52 <__retarget_lock_acquire_recursive>
 8000826:	bf00      	nop
 8000828:	20000205 	.word	0x20000205

0800082c <__sfp_lock_release>:
 800082c:	4801      	ldr	r0, [pc, #4]	; (8000834 <__sfp_lock_release+0x8>)
 800082e:	f000 b911 	b.w	8000a54 <__retarget_lock_release_recursive>
 8000832:	bf00      	nop
 8000834:	20000205 	.word	0x20000205

08000838 <__sinit>:
 8000838:	b510      	push	{r4, lr}
 800083a:	4604      	mov	r4, r0
 800083c:	f7ff fff0 	bl	8000820 <__sfp_lock_acquire>
 8000840:	6a23      	ldr	r3, [r4, #32]
 8000842:	b11b      	cbz	r3, 800084c <__sinit+0x14>
 8000844:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000848:	f7ff bff0 	b.w	800082c <__sfp_lock_release>
 800084c:	4b04      	ldr	r3, [pc, #16]	; (8000860 <__sinit+0x28>)
 800084e:	6223      	str	r3, [r4, #32]
 8000850:	4b04      	ldr	r3, [pc, #16]	; (8000864 <__sinit+0x2c>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d1f5      	bne.n	8000844 <__sinit+0xc>
 8000858:	f7ff ffc4 	bl	80007e4 <global_stdio_init.part.0>
 800085c:	e7f2      	b.n	8000844 <__sinit+0xc>
 800085e:	bf00      	nop
 8000860:	080007a5 	.word	0x080007a5
 8000864:	200001fc 	.word	0x200001fc

08000868 <_fwalk_sglue>:
 8000868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800086c:	4607      	mov	r7, r0
 800086e:	4688      	mov	r8, r1
 8000870:	4614      	mov	r4, r2
 8000872:	2600      	movs	r6, #0
 8000874:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000878:	f1b9 0901 	subs.w	r9, r9, #1
 800087c:	d505      	bpl.n	800088a <_fwalk_sglue+0x22>
 800087e:	6824      	ldr	r4, [r4, #0]
 8000880:	2c00      	cmp	r4, #0
 8000882:	d1f7      	bne.n	8000874 <_fwalk_sglue+0xc>
 8000884:	4630      	mov	r0, r6
 8000886:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800088a:	89ab      	ldrh	r3, [r5, #12]
 800088c:	2b01      	cmp	r3, #1
 800088e:	d907      	bls.n	80008a0 <_fwalk_sglue+0x38>
 8000890:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000894:	3301      	adds	r3, #1
 8000896:	d003      	beq.n	80008a0 <_fwalk_sglue+0x38>
 8000898:	4629      	mov	r1, r5
 800089a:	4638      	mov	r0, r7
 800089c:	47c0      	blx	r8
 800089e:	4306      	orrs	r6, r0
 80008a0:	3568      	adds	r5, #104	; 0x68
 80008a2:	e7e9      	b.n	8000878 <_fwalk_sglue+0x10>

080008a4 <iprintf>:
 80008a4:	b40f      	push	{r0, r1, r2, r3}
 80008a6:	b507      	push	{r0, r1, r2, lr}
 80008a8:	4906      	ldr	r1, [pc, #24]	; (80008c4 <iprintf+0x20>)
 80008aa:	ab04      	add	r3, sp, #16
 80008ac:	6808      	ldr	r0, [r1, #0]
 80008ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80008b2:	6881      	ldr	r1, [r0, #8]
 80008b4:	9301      	str	r3, [sp, #4]
 80008b6:	f000 fa13 	bl	8000ce0 <_vfiprintf_r>
 80008ba:	b003      	add	sp, #12
 80008bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80008c0:	b004      	add	sp, #16
 80008c2:	4770      	bx	lr
 80008c4:	200000a0 	.word	0x200000a0

080008c8 <putchar>:
 80008c8:	4b02      	ldr	r3, [pc, #8]	; (80008d4 <putchar+0xc>)
 80008ca:	4601      	mov	r1, r0
 80008cc:	6818      	ldr	r0, [r3, #0]
 80008ce:	6882      	ldr	r2, [r0, #8]
 80008d0:	f000 bd6c 	b.w	80013ac <_putc_r>
 80008d4:	200000a0 	.word	0x200000a0

080008d8 <__sread>:
 80008d8:	b510      	push	{r4, lr}
 80008da:	460c      	mov	r4, r1
 80008dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008e0:	f000 f868 	bl	80009b4 <_read_r>
 80008e4:	2800      	cmp	r0, #0
 80008e6:	bfab      	itete	ge
 80008e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80008ea:	89a3      	ldrhlt	r3, [r4, #12]
 80008ec:	181b      	addge	r3, r3, r0
 80008ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80008f2:	bfac      	ite	ge
 80008f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80008f6:	81a3      	strhlt	r3, [r4, #12]
 80008f8:	bd10      	pop	{r4, pc}

080008fa <__swrite>:
 80008fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80008fe:	461f      	mov	r7, r3
 8000900:	898b      	ldrh	r3, [r1, #12]
 8000902:	05db      	lsls	r3, r3, #23
 8000904:	4605      	mov	r5, r0
 8000906:	460c      	mov	r4, r1
 8000908:	4616      	mov	r6, r2
 800090a:	d505      	bpl.n	8000918 <__swrite+0x1e>
 800090c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000910:	2302      	movs	r3, #2
 8000912:	2200      	movs	r2, #0
 8000914:	f000 f83c 	bl	8000990 <_lseek_r>
 8000918:	89a3      	ldrh	r3, [r4, #12]
 800091a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800091e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000922:	81a3      	strh	r3, [r4, #12]
 8000924:	4632      	mov	r2, r6
 8000926:	463b      	mov	r3, r7
 8000928:	4628      	mov	r0, r5
 800092a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800092e:	f000 b853 	b.w	80009d8 <_write_r>

08000932 <__sseek>:
 8000932:	b510      	push	{r4, lr}
 8000934:	460c      	mov	r4, r1
 8000936:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800093a:	f000 f829 	bl	8000990 <_lseek_r>
 800093e:	1c43      	adds	r3, r0, #1
 8000940:	89a3      	ldrh	r3, [r4, #12]
 8000942:	bf15      	itete	ne
 8000944:	6560      	strne	r0, [r4, #84]	; 0x54
 8000946:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800094a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800094e:	81a3      	strheq	r3, [r4, #12]
 8000950:	bf18      	it	ne
 8000952:	81a3      	strhne	r3, [r4, #12]
 8000954:	bd10      	pop	{r4, pc}

08000956 <__sclose>:
 8000956:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800095a:	f000 b809 	b.w	8000970 <_close_r>

0800095e <memset>:
 800095e:	4402      	add	r2, r0
 8000960:	4603      	mov	r3, r0
 8000962:	4293      	cmp	r3, r2
 8000964:	d100      	bne.n	8000968 <memset+0xa>
 8000966:	4770      	bx	lr
 8000968:	f803 1b01 	strb.w	r1, [r3], #1
 800096c:	e7f9      	b.n	8000962 <memset+0x4>
	...

08000970 <_close_r>:
 8000970:	b538      	push	{r3, r4, r5, lr}
 8000972:	4d06      	ldr	r5, [pc, #24]	; (800098c <_close_r+0x1c>)
 8000974:	2300      	movs	r3, #0
 8000976:	4604      	mov	r4, r0
 8000978:	4608      	mov	r0, r1
 800097a:	602b      	str	r3, [r5, #0]
 800097c:	f7ff fe02 	bl	8000584 <_close>
 8000980:	1c43      	adds	r3, r0, #1
 8000982:	d102      	bne.n	800098a <_close_r+0x1a>
 8000984:	682b      	ldr	r3, [r5, #0]
 8000986:	b103      	cbz	r3, 800098a <_close_r+0x1a>
 8000988:	6023      	str	r3, [r4, #0]
 800098a:	bd38      	pop	{r3, r4, r5, pc}
 800098c:	20000200 	.word	0x20000200

08000990 <_lseek_r>:
 8000990:	b538      	push	{r3, r4, r5, lr}
 8000992:	4d07      	ldr	r5, [pc, #28]	; (80009b0 <_lseek_r+0x20>)
 8000994:	4604      	mov	r4, r0
 8000996:	4608      	mov	r0, r1
 8000998:	4611      	mov	r1, r2
 800099a:	2200      	movs	r2, #0
 800099c:	602a      	str	r2, [r5, #0]
 800099e:	461a      	mov	r2, r3
 80009a0:	f7ff fe14 	bl	80005cc <_lseek>
 80009a4:	1c43      	adds	r3, r0, #1
 80009a6:	d102      	bne.n	80009ae <_lseek_r+0x1e>
 80009a8:	682b      	ldr	r3, [r5, #0]
 80009aa:	b103      	cbz	r3, 80009ae <_lseek_r+0x1e>
 80009ac:	6023      	str	r3, [r4, #0]
 80009ae:	bd38      	pop	{r3, r4, r5, pc}
 80009b0:	20000200 	.word	0x20000200

080009b4 <_read_r>:
 80009b4:	b538      	push	{r3, r4, r5, lr}
 80009b6:	4d07      	ldr	r5, [pc, #28]	; (80009d4 <_read_r+0x20>)
 80009b8:	4604      	mov	r4, r0
 80009ba:	4608      	mov	r0, r1
 80009bc:	4611      	mov	r1, r2
 80009be:	2200      	movs	r2, #0
 80009c0:	602a      	str	r2, [r5, #0]
 80009c2:	461a      	mov	r2, r3
 80009c4:	f7ff fda5 	bl	8000512 <_read>
 80009c8:	1c43      	adds	r3, r0, #1
 80009ca:	d102      	bne.n	80009d2 <_read_r+0x1e>
 80009cc:	682b      	ldr	r3, [r5, #0]
 80009ce:	b103      	cbz	r3, 80009d2 <_read_r+0x1e>
 80009d0:	6023      	str	r3, [r4, #0]
 80009d2:	bd38      	pop	{r3, r4, r5, pc}
 80009d4:	20000200 	.word	0x20000200

080009d8 <_write_r>:
 80009d8:	b538      	push	{r3, r4, r5, lr}
 80009da:	4d07      	ldr	r5, [pc, #28]	; (80009f8 <_write_r+0x20>)
 80009dc:	4604      	mov	r4, r0
 80009de:	4608      	mov	r0, r1
 80009e0:	4611      	mov	r1, r2
 80009e2:	2200      	movs	r2, #0
 80009e4:	602a      	str	r2, [r5, #0]
 80009e6:	461a      	mov	r2, r3
 80009e8:	f7ff fdb0 	bl	800054c <_write>
 80009ec:	1c43      	adds	r3, r0, #1
 80009ee:	d102      	bne.n	80009f6 <_write_r+0x1e>
 80009f0:	682b      	ldr	r3, [r5, #0]
 80009f2:	b103      	cbz	r3, 80009f6 <_write_r+0x1e>
 80009f4:	6023      	str	r3, [r4, #0]
 80009f6:	bd38      	pop	{r3, r4, r5, pc}
 80009f8:	20000200 	.word	0x20000200

080009fc <__errno>:
 80009fc:	4b01      	ldr	r3, [pc, #4]	; (8000a04 <__errno+0x8>)
 80009fe:	6818      	ldr	r0, [r3, #0]
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	200000a0 	.word	0x200000a0

08000a08 <__libc_init_array>:
 8000a08:	b570      	push	{r4, r5, r6, lr}
 8000a0a:	4d0d      	ldr	r5, [pc, #52]	; (8000a40 <__libc_init_array+0x38>)
 8000a0c:	4c0d      	ldr	r4, [pc, #52]	; (8000a44 <__libc_init_array+0x3c>)
 8000a0e:	1b64      	subs	r4, r4, r5
 8000a10:	10a4      	asrs	r4, r4, #2
 8000a12:	2600      	movs	r6, #0
 8000a14:	42a6      	cmp	r6, r4
 8000a16:	d109      	bne.n	8000a2c <__libc_init_array+0x24>
 8000a18:	4d0b      	ldr	r5, [pc, #44]	; (8000a48 <__libc_init_array+0x40>)
 8000a1a:	4c0c      	ldr	r4, [pc, #48]	; (8000a4c <__libc_init_array+0x44>)
 8000a1c:	f000 fe70 	bl	8001700 <_init>
 8000a20:	1b64      	subs	r4, r4, r5
 8000a22:	10a4      	asrs	r4, r4, #2
 8000a24:	2600      	movs	r6, #0
 8000a26:	42a6      	cmp	r6, r4
 8000a28:	d105      	bne.n	8000a36 <__libc_init_array+0x2e>
 8000a2a:	bd70      	pop	{r4, r5, r6, pc}
 8000a2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a30:	4798      	blx	r3
 8000a32:	3601      	adds	r6, #1
 8000a34:	e7ee      	b.n	8000a14 <__libc_init_array+0xc>
 8000a36:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a3a:	4798      	blx	r3
 8000a3c:	3601      	adds	r6, #1
 8000a3e:	e7f2      	b.n	8000a26 <__libc_init_array+0x1e>
 8000a40:	08001854 	.word	0x08001854
 8000a44:	08001854 	.word	0x08001854
 8000a48:	08001854 	.word	0x08001854
 8000a4c:	08001858 	.word	0x08001858

08000a50 <__retarget_lock_init_recursive>:
 8000a50:	4770      	bx	lr

08000a52 <__retarget_lock_acquire_recursive>:
 8000a52:	4770      	bx	lr

08000a54 <__retarget_lock_release_recursive>:
 8000a54:	4770      	bx	lr
	...

08000a58 <__assert_func>:
 8000a58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000a5a:	4614      	mov	r4, r2
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	4b09      	ldr	r3, [pc, #36]	; (8000a84 <__assert_func+0x2c>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4605      	mov	r5, r0
 8000a64:	68d8      	ldr	r0, [r3, #12]
 8000a66:	b14c      	cbz	r4, 8000a7c <__assert_func+0x24>
 8000a68:	4b07      	ldr	r3, [pc, #28]	; (8000a88 <__assert_func+0x30>)
 8000a6a:	9100      	str	r1, [sp, #0]
 8000a6c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8000a70:	4906      	ldr	r1, [pc, #24]	; (8000a8c <__assert_func+0x34>)
 8000a72:	462b      	mov	r3, r5
 8000a74:	f000 fc88 	bl	8001388 <fiprintf>
 8000a78:	f000 fd72 	bl	8001560 <abort>
 8000a7c:	4b04      	ldr	r3, [pc, #16]	; (8000a90 <__assert_func+0x38>)
 8000a7e:	461c      	mov	r4, r3
 8000a80:	e7f3      	b.n	8000a6a <__assert_func+0x12>
 8000a82:	bf00      	nop
 8000a84:	200000a0 	.word	0x200000a0
 8000a88:	080017e2 	.word	0x080017e2
 8000a8c:	080017ef 	.word	0x080017ef
 8000a90:	0800181d 	.word	0x0800181d

08000a94 <_free_r>:
 8000a94:	b538      	push	{r3, r4, r5, lr}
 8000a96:	4605      	mov	r5, r0
 8000a98:	2900      	cmp	r1, #0
 8000a9a:	d041      	beq.n	8000b20 <_free_r+0x8c>
 8000a9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000aa0:	1f0c      	subs	r4, r1, #4
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	bfb8      	it	lt
 8000aa6:	18e4      	addlt	r4, r4, r3
 8000aa8:	f000 f8e6 	bl	8000c78 <__malloc_lock>
 8000aac:	4a1d      	ldr	r2, [pc, #116]	; (8000b24 <_free_r+0x90>)
 8000aae:	6813      	ldr	r3, [r2, #0]
 8000ab0:	b933      	cbnz	r3, 8000ac0 <_free_r+0x2c>
 8000ab2:	6063      	str	r3, [r4, #4]
 8000ab4:	6014      	str	r4, [r2, #0]
 8000ab6:	4628      	mov	r0, r5
 8000ab8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000abc:	f000 b8e2 	b.w	8000c84 <__malloc_unlock>
 8000ac0:	42a3      	cmp	r3, r4
 8000ac2:	d908      	bls.n	8000ad6 <_free_r+0x42>
 8000ac4:	6820      	ldr	r0, [r4, #0]
 8000ac6:	1821      	adds	r1, r4, r0
 8000ac8:	428b      	cmp	r3, r1
 8000aca:	bf01      	itttt	eq
 8000acc:	6819      	ldreq	r1, [r3, #0]
 8000ace:	685b      	ldreq	r3, [r3, #4]
 8000ad0:	1809      	addeq	r1, r1, r0
 8000ad2:	6021      	streq	r1, [r4, #0]
 8000ad4:	e7ed      	b.n	8000ab2 <_free_r+0x1e>
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	b10b      	cbz	r3, 8000ae0 <_free_r+0x4c>
 8000adc:	42a3      	cmp	r3, r4
 8000ade:	d9fa      	bls.n	8000ad6 <_free_r+0x42>
 8000ae0:	6811      	ldr	r1, [r2, #0]
 8000ae2:	1850      	adds	r0, r2, r1
 8000ae4:	42a0      	cmp	r0, r4
 8000ae6:	d10b      	bne.n	8000b00 <_free_r+0x6c>
 8000ae8:	6820      	ldr	r0, [r4, #0]
 8000aea:	4401      	add	r1, r0
 8000aec:	1850      	adds	r0, r2, r1
 8000aee:	4283      	cmp	r3, r0
 8000af0:	6011      	str	r1, [r2, #0]
 8000af2:	d1e0      	bne.n	8000ab6 <_free_r+0x22>
 8000af4:	6818      	ldr	r0, [r3, #0]
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	6053      	str	r3, [r2, #4]
 8000afa:	4408      	add	r0, r1
 8000afc:	6010      	str	r0, [r2, #0]
 8000afe:	e7da      	b.n	8000ab6 <_free_r+0x22>
 8000b00:	d902      	bls.n	8000b08 <_free_r+0x74>
 8000b02:	230c      	movs	r3, #12
 8000b04:	602b      	str	r3, [r5, #0]
 8000b06:	e7d6      	b.n	8000ab6 <_free_r+0x22>
 8000b08:	6820      	ldr	r0, [r4, #0]
 8000b0a:	1821      	adds	r1, r4, r0
 8000b0c:	428b      	cmp	r3, r1
 8000b0e:	bf04      	itt	eq
 8000b10:	6819      	ldreq	r1, [r3, #0]
 8000b12:	685b      	ldreq	r3, [r3, #4]
 8000b14:	6063      	str	r3, [r4, #4]
 8000b16:	bf04      	itt	eq
 8000b18:	1809      	addeq	r1, r1, r0
 8000b1a:	6021      	streq	r1, [r4, #0]
 8000b1c:	6054      	str	r4, [r2, #4]
 8000b1e:	e7ca      	b.n	8000ab6 <_free_r+0x22>
 8000b20:	bd38      	pop	{r3, r4, r5, pc}
 8000b22:	bf00      	nop
 8000b24:	20000208 	.word	0x20000208

08000b28 <malloc>:
 8000b28:	4b02      	ldr	r3, [pc, #8]	; (8000b34 <malloc+0xc>)
 8000b2a:	4601      	mov	r1, r0
 8000b2c:	6818      	ldr	r0, [r3, #0]
 8000b2e:	f000 b823 	b.w	8000b78 <_malloc_r>
 8000b32:	bf00      	nop
 8000b34:	200000a0 	.word	0x200000a0

08000b38 <sbrk_aligned>:
 8000b38:	b570      	push	{r4, r5, r6, lr}
 8000b3a:	4e0e      	ldr	r6, [pc, #56]	; (8000b74 <sbrk_aligned+0x3c>)
 8000b3c:	460c      	mov	r4, r1
 8000b3e:	6831      	ldr	r1, [r6, #0]
 8000b40:	4605      	mov	r5, r0
 8000b42:	b911      	cbnz	r1, 8000b4a <sbrk_aligned+0x12>
 8000b44:	f000 fcfc 	bl	8001540 <_sbrk_r>
 8000b48:	6030      	str	r0, [r6, #0]
 8000b4a:	4621      	mov	r1, r4
 8000b4c:	4628      	mov	r0, r5
 8000b4e:	f000 fcf7 	bl	8001540 <_sbrk_r>
 8000b52:	1c43      	adds	r3, r0, #1
 8000b54:	d00a      	beq.n	8000b6c <sbrk_aligned+0x34>
 8000b56:	1cc4      	adds	r4, r0, #3
 8000b58:	f024 0403 	bic.w	r4, r4, #3
 8000b5c:	42a0      	cmp	r0, r4
 8000b5e:	d007      	beq.n	8000b70 <sbrk_aligned+0x38>
 8000b60:	1a21      	subs	r1, r4, r0
 8000b62:	4628      	mov	r0, r5
 8000b64:	f000 fcec 	bl	8001540 <_sbrk_r>
 8000b68:	3001      	adds	r0, #1
 8000b6a:	d101      	bne.n	8000b70 <sbrk_aligned+0x38>
 8000b6c:	f04f 34ff 	mov.w	r4, #4294967295
 8000b70:	4620      	mov	r0, r4
 8000b72:	bd70      	pop	{r4, r5, r6, pc}
 8000b74:	2000020c 	.word	0x2000020c

08000b78 <_malloc_r>:
 8000b78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000b7c:	1ccd      	adds	r5, r1, #3
 8000b7e:	f025 0503 	bic.w	r5, r5, #3
 8000b82:	3508      	adds	r5, #8
 8000b84:	2d0c      	cmp	r5, #12
 8000b86:	bf38      	it	cc
 8000b88:	250c      	movcc	r5, #12
 8000b8a:	2d00      	cmp	r5, #0
 8000b8c:	4607      	mov	r7, r0
 8000b8e:	db01      	blt.n	8000b94 <_malloc_r+0x1c>
 8000b90:	42a9      	cmp	r1, r5
 8000b92:	d905      	bls.n	8000ba0 <_malloc_r+0x28>
 8000b94:	230c      	movs	r3, #12
 8000b96:	603b      	str	r3, [r7, #0]
 8000b98:	2600      	movs	r6, #0
 8000b9a:	4630      	mov	r0, r6
 8000b9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000ba0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000c74 <_malloc_r+0xfc>
 8000ba4:	f000 f868 	bl	8000c78 <__malloc_lock>
 8000ba8:	f8d8 3000 	ldr.w	r3, [r8]
 8000bac:	461c      	mov	r4, r3
 8000bae:	bb5c      	cbnz	r4, 8000c08 <_malloc_r+0x90>
 8000bb0:	4629      	mov	r1, r5
 8000bb2:	4638      	mov	r0, r7
 8000bb4:	f7ff ffc0 	bl	8000b38 <sbrk_aligned>
 8000bb8:	1c43      	adds	r3, r0, #1
 8000bba:	4604      	mov	r4, r0
 8000bbc:	d155      	bne.n	8000c6a <_malloc_r+0xf2>
 8000bbe:	f8d8 4000 	ldr.w	r4, [r8]
 8000bc2:	4626      	mov	r6, r4
 8000bc4:	2e00      	cmp	r6, #0
 8000bc6:	d145      	bne.n	8000c54 <_malloc_r+0xdc>
 8000bc8:	2c00      	cmp	r4, #0
 8000bca:	d048      	beq.n	8000c5e <_malloc_r+0xe6>
 8000bcc:	6823      	ldr	r3, [r4, #0]
 8000bce:	4631      	mov	r1, r6
 8000bd0:	4638      	mov	r0, r7
 8000bd2:	eb04 0903 	add.w	r9, r4, r3
 8000bd6:	f000 fcb3 	bl	8001540 <_sbrk_r>
 8000bda:	4581      	cmp	r9, r0
 8000bdc:	d13f      	bne.n	8000c5e <_malloc_r+0xe6>
 8000bde:	6821      	ldr	r1, [r4, #0]
 8000be0:	1a6d      	subs	r5, r5, r1
 8000be2:	4629      	mov	r1, r5
 8000be4:	4638      	mov	r0, r7
 8000be6:	f7ff ffa7 	bl	8000b38 <sbrk_aligned>
 8000bea:	3001      	adds	r0, #1
 8000bec:	d037      	beq.n	8000c5e <_malloc_r+0xe6>
 8000bee:	6823      	ldr	r3, [r4, #0]
 8000bf0:	442b      	add	r3, r5
 8000bf2:	6023      	str	r3, [r4, #0]
 8000bf4:	f8d8 3000 	ldr.w	r3, [r8]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d038      	beq.n	8000c6e <_malloc_r+0xf6>
 8000bfc:	685a      	ldr	r2, [r3, #4]
 8000bfe:	42a2      	cmp	r2, r4
 8000c00:	d12b      	bne.n	8000c5a <_malloc_r+0xe2>
 8000c02:	2200      	movs	r2, #0
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	e00f      	b.n	8000c28 <_malloc_r+0xb0>
 8000c08:	6822      	ldr	r2, [r4, #0]
 8000c0a:	1b52      	subs	r2, r2, r5
 8000c0c:	d41f      	bmi.n	8000c4e <_malloc_r+0xd6>
 8000c0e:	2a0b      	cmp	r2, #11
 8000c10:	d917      	bls.n	8000c42 <_malloc_r+0xca>
 8000c12:	1961      	adds	r1, r4, r5
 8000c14:	42a3      	cmp	r3, r4
 8000c16:	6025      	str	r5, [r4, #0]
 8000c18:	bf18      	it	ne
 8000c1a:	6059      	strne	r1, [r3, #4]
 8000c1c:	6863      	ldr	r3, [r4, #4]
 8000c1e:	bf08      	it	eq
 8000c20:	f8c8 1000 	streq.w	r1, [r8]
 8000c24:	5162      	str	r2, [r4, r5]
 8000c26:	604b      	str	r3, [r1, #4]
 8000c28:	4638      	mov	r0, r7
 8000c2a:	f104 060b 	add.w	r6, r4, #11
 8000c2e:	f000 f829 	bl	8000c84 <__malloc_unlock>
 8000c32:	f026 0607 	bic.w	r6, r6, #7
 8000c36:	1d23      	adds	r3, r4, #4
 8000c38:	1af2      	subs	r2, r6, r3
 8000c3a:	d0ae      	beq.n	8000b9a <_malloc_r+0x22>
 8000c3c:	1b9b      	subs	r3, r3, r6
 8000c3e:	50a3      	str	r3, [r4, r2]
 8000c40:	e7ab      	b.n	8000b9a <_malloc_r+0x22>
 8000c42:	42a3      	cmp	r3, r4
 8000c44:	6862      	ldr	r2, [r4, #4]
 8000c46:	d1dd      	bne.n	8000c04 <_malloc_r+0x8c>
 8000c48:	f8c8 2000 	str.w	r2, [r8]
 8000c4c:	e7ec      	b.n	8000c28 <_malloc_r+0xb0>
 8000c4e:	4623      	mov	r3, r4
 8000c50:	6864      	ldr	r4, [r4, #4]
 8000c52:	e7ac      	b.n	8000bae <_malloc_r+0x36>
 8000c54:	4634      	mov	r4, r6
 8000c56:	6876      	ldr	r6, [r6, #4]
 8000c58:	e7b4      	b.n	8000bc4 <_malloc_r+0x4c>
 8000c5a:	4613      	mov	r3, r2
 8000c5c:	e7cc      	b.n	8000bf8 <_malloc_r+0x80>
 8000c5e:	230c      	movs	r3, #12
 8000c60:	603b      	str	r3, [r7, #0]
 8000c62:	4638      	mov	r0, r7
 8000c64:	f000 f80e 	bl	8000c84 <__malloc_unlock>
 8000c68:	e797      	b.n	8000b9a <_malloc_r+0x22>
 8000c6a:	6025      	str	r5, [r4, #0]
 8000c6c:	e7dc      	b.n	8000c28 <_malloc_r+0xb0>
 8000c6e:	605b      	str	r3, [r3, #4]
 8000c70:	deff      	udf	#255	; 0xff
 8000c72:	bf00      	nop
 8000c74:	20000208 	.word	0x20000208

08000c78 <__malloc_lock>:
 8000c78:	4801      	ldr	r0, [pc, #4]	; (8000c80 <__malloc_lock+0x8>)
 8000c7a:	f7ff beea 	b.w	8000a52 <__retarget_lock_acquire_recursive>
 8000c7e:	bf00      	nop
 8000c80:	20000204 	.word	0x20000204

08000c84 <__malloc_unlock>:
 8000c84:	4801      	ldr	r0, [pc, #4]	; (8000c8c <__malloc_unlock+0x8>)
 8000c86:	f7ff bee5 	b.w	8000a54 <__retarget_lock_release_recursive>
 8000c8a:	bf00      	nop
 8000c8c:	20000204 	.word	0x20000204

08000c90 <__sfputc_r>:
 8000c90:	6893      	ldr	r3, [r2, #8]
 8000c92:	3b01      	subs	r3, #1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	b410      	push	{r4}
 8000c98:	6093      	str	r3, [r2, #8]
 8000c9a:	da07      	bge.n	8000cac <__sfputc_r+0x1c>
 8000c9c:	6994      	ldr	r4, [r2, #24]
 8000c9e:	42a3      	cmp	r3, r4
 8000ca0:	db01      	blt.n	8000ca6 <__sfputc_r+0x16>
 8000ca2:	290a      	cmp	r1, #10
 8000ca4:	d102      	bne.n	8000cac <__sfputc_r+0x1c>
 8000ca6:	bc10      	pop	{r4}
 8000ca8:	f000 bbb4 	b.w	8001414 <__swbuf_r>
 8000cac:	6813      	ldr	r3, [r2, #0]
 8000cae:	1c58      	adds	r0, r3, #1
 8000cb0:	6010      	str	r0, [r2, #0]
 8000cb2:	7019      	strb	r1, [r3, #0]
 8000cb4:	4608      	mov	r0, r1
 8000cb6:	bc10      	pop	{r4}
 8000cb8:	4770      	bx	lr

08000cba <__sfputs_r>:
 8000cba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cbc:	4606      	mov	r6, r0
 8000cbe:	460f      	mov	r7, r1
 8000cc0:	4614      	mov	r4, r2
 8000cc2:	18d5      	adds	r5, r2, r3
 8000cc4:	42ac      	cmp	r4, r5
 8000cc6:	d101      	bne.n	8000ccc <__sfputs_r+0x12>
 8000cc8:	2000      	movs	r0, #0
 8000cca:	e007      	b.n	8000cdc <__sfputs_r+0x22>
 8000ccc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000cd0:	463a      	mov	r2, r7
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	f7ff ffdc 	bl	8000c90 <__sfputc_r>
 8000cd8:	1c43      	adds	r3, r0, #1
 8000cda:	d1f3      	bne.n	8000cc4 <__sfputs_r+0xa>
 8000cdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000ce0 <_vfiprintf_r>:
 8000ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ce4:	460d      	mov	r5, r1
 8000ce6:	b09d      	sub	sp, #116	; 0x74
 8000ce8:	4614      	mov	r4, r2
 8000cea:	4698      	mov	r8, r3
 8000cec:	4606      	mov	r6, r0
 8000cee:	b118      	cbz	r0, 8000cf8 <_vfiprintf_r+0x18>
 8000cf0:	6a03      	ldr	r3, [r0, #32]
 8000cf2:	b90b      	cbnz	r3, 8000cf8 <_vfiprintf_r+0x18>
 8000cf4:	f7ff fda0 	bl	8000838 <__sinit>
 8000cf8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000cfa:	07d9      	lsls	r1, r3, #31
 8000cfc:	d405      	bmi.n	8000d0a <_vfiprintf_r+0x2a>
 8000cfe:	89ab      	ldrh	r3, [r5, #12]
 8000d00:	059a      	lsls	r2, r3, #22
 8000d02:	d402      	bmi.n	8000d0a <_vfiprintf_r+0x2a>
 8000d04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000d06:	f7ff fea4 	bl	8000a52 <__retarget_lock_acquire_recursive>
 8000d0a:	89ab      	ldrh	r3, [r5, #12]
 8000d0c:	071b      	lsls	r3, r3, #28
 8000d0e:	d501      	bpl.n	8000d14 <_vfiprintf_r+0x34>
 8000d10:	692b      	ldr	r3, [r5, #16]
 8000d12:	b99b      	cbnz	r3, 8000d3c <_vfiprintf_r+0x5c>
 8000d14:	4629      	mov	r1, r5
 8000d16:	4630      	mov	r0, r6
 8000d18:	f000 fbba 	bl	8001490 <__swsetup_r>
 8000d1c:	b170      	cbz	r0, 8000d3c <_vfiprintf_r+0x5c>
 8000d1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000d20:	07dc      	lsls	r4, r3, #31
 8000d22:	d504      	bpl.n	8000d2e <_vfiprintf_r+0x4e>
 8000d24:	f04f 30ff 	mov.w	r0, #4294967295
 8000d28:	b01d      	add	sp, #116	; 0x74
 8000d2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d2e:	89ab      	ldrh	r3, [r5, #12]
 8000d30:	0598      	lsls	r0, r3, #22
 8000d32:	d4f7      	bmi.n	8000d24 <_vfiprintf_r+0x44>
 8000d34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000d36:	f7ff fe8d 	bl	8000a54 <__retarget_lock_release_recursive>
 8000d3a:	e7f3      	b.n	8000d24 <_vfiprintf_r+0x44>
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	9309      	str	r3, [sp, #36]	; 0x24
 8000d40:	2320      	movs	r3, #32
 8000d42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000d46:	f8cd 800c 	str.w	r8, [sp, #12]
 8000d4a:	2330      	movs	r3, #48	; 0x30
 8000d4c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8000f00 <_vfiprintf_r+0x220>
 8000d50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000d54:	f04f 0901 	mov.w	r9, #1
 8000d58:	4623      	mov	r3, r4
 8000d5a:	469a      	mov	sl, r3
 8000d5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000d60:	b10a      	cbz	r2, 8000d66 <_vfiprintf_r+0x86>
 8000d62:	2a25      	cmp	r2, #37	; 0x25
 8000d64:	d1f9      	bne.n	8000d5a <_vfiprintf_r+0x7a>
 8000d66:	ebba 0b04 	subs.w	fp, sl, r4
 8000d6a:	d00b      	beq.n	8000d84 <_vfiprintf_r+0xa4>
 8000d6c:	465b      	mov	r3, fp
 8000d6e:	4622      	mov	r2, r4
 8000d70:	4629      	mov	r1, r5
 8000d72:	4630      	mov	r0, r6
 8000d74:	f7ff ffa1 	bl	8000cba <__sfputs_r>
 8000d78:	3001      	adds	r0, #1
 8000d7a:	f000 80a9 	beq.w	8000ed0 <_vfiprintf_r+0x1f0>
 8000d7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000d80:	445a      	add	r2, fp
 8000d82:	9209      	str	r2, [sp, #36]	; 0x24
 8000d84:	f89a 3000 	ldrb.w	r3, [sl]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	f000 80a1 	beq.w	8000ed0 <_vfiprintf_r+0x1f0>
 8000d8e:	2300      	movs	r3, #0
 8000d90:	f04f 32ff 	mov.w	r2, #4294967295
 8000d94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000d98:	f10a 0a01 	add.w	sl, sl, #1
 8000d9c:	9304      	str	r3, [sp, #16]
 8000d9e:	9307      	str	r3, [sp, #28]
 8000da0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000da4:	931a      	str	r3, [sp, #104]	; 0x68
 8000da6:	4654      	mov	r4, sl
 8000da8:	2205      	movs	r2, #5
 8000daa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000dae:	4854      	ldr	r0, [pc, #336]	; (8000f00 <_vfiprintf_r+0x220>)
 8000db0:	f7ff fa16 	bl	80001e0 <memchr>
 8000db4:	9a04      	ldr	r2, [sp, #16]
 8000db6:	b9d8      	cbnz	r0, 8000df0 <_vfiprintf_r+0x110>
 8000db8:	06d1      	lsls	r1, r2, #27
 8000dba:	bf44      	itt	mi
 8000dbc:	2320      	movmi	r3, #32
 8000dbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000dc2:	0713      	lsls	r3, r2, #28
 8000dc4:	bf44      	itt	mi
 8000dc6:	232b      	movmi	r3, #43	; 0x2b
 8000dc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000dcc:	f89a 3000 	ldrb.w	r3, [sl]
 8000dd0:	2b2a      	cmp	r3, #42	; 0x2a
 8000dd2:	d015      	beq.n	8000e00 <_vfiprintf_r+0x120>
 8000dd4:	9a07      	ldr	r2, [sp, #28]
 8000dd6:	4654      	mov	r4, sl
 8000dd8:	2000      	movs	r0, #0
 8000dda:	f04f 0c0a 	mov.w	ip, #10
 8000dde:	4621      	mov	r1, r4
 8000de0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000de4:	3b30      	subs	r3, #48	; 0x30
 8000de6:	2b09      	cmp	r3, #9
 8000de8:	d94d      	bls.n	8000e86 <_vfiprintf_r+0x1a6>
 8000dea:	b1b0      	cbz	r0, 8000e1a <_vfiprintf_r+0x13a>
 8000dec:	9207      	str	r2, [sp, #28]
 8000dee:	e014      	b.n	8000e1a <_vfiprintf_r+0x13a>
 8000df0:	eba0 0308 	sub.w	r3, r0, r8
 8000df4:	fa09 f303 	lsl.w	r3, r9, r3
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	9304      	str	r3, [sp, #16]
 8000dfc:	46a2      	mov	sl, r4
 8000dfe:	e7d2      	b.n	8000da6 <_vfiprintf_r+0xc6>
 8000e00:	9b03      	ldr	r3, [sp, #12]
 8000e02:	1d19      	adds	r1, r3, #4
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	9103      	str	r1, [sp, #12]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	bfbb      	ittet	lt
 8000e0c:	425b      	neglt	r3, r3
 8000e0e:	f042 0202 	orrlt.w	r2, r2, #2
 8000e12:	9307      	strge	r3, [sp, #28]
 8000e14:	9307      	strlt	r3, [sp, #28]
 8000e16:	bfb8      	it	lt
 8000e18:	9204      	strlt	r2, [sp, #16]
 8000e1a:	7823      	ldrb	r3, [r4, #0]
 8000e1c:	2b2e      	cmp	r3, #46	; 0x2e
 8000e1e:	d10c      	bne.n	8000e3a <_vfiprintf_r+0x15a>
 8000e20:	7863      	ldrb	r3, [r4, #1]
 8000e22:	2b2a      	cmp	r3, #42	; 0x2a
 8000e24:	d134      	bne.n	8000e90 <_vfiprintf_r+0x1b0>
 8000e26:	9b03      	ldr	r3, [sp, #12]
 8000e28:	1d1a      	adds	r2, r3, #4
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	9203      	str	r2, [sp, #12]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	bfb8      	it	lt
 8000e32:	f04f 33ff 	movlt.w	r3, #4294967295
 8000e36:	3402      	adds	r4, #2
 8000e38:	9305      	str	r3, [sp, #20]
 8000e3a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8000f04 <_vfiprintf_r+0x224>
 8000e3e:	7821      	ldrb	r1, [r4, #0]
 8000e40:	2203      	movs	r2, #3
 8000e42:	4650      	mov	r0, sl
 8000e44:	f7ff f9cc 	bl	80001e0 <memchr>
 8000e48:	b138      	cbz	r0, 8000e5a <_vfiprintf_r+0x17a>
 8000e4a:	9b04      	ldr	r3, [sp, #16]
 8000e4c:	eba0 000a 	sub.w	r0, r0, sl
 8000e50:	2240      	movs	r2, #64	; 0x40
 8000e52:	4082      	lsls	r2, r0
 8000e54:	4313      	orrs	r3, r2
 8000e56:	3401      	adds	r4, #1
 8000e58:	9304      	str	r3, [sp, #16]
 8000e5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000e5e:	482a      	ldr	r0, [pc, #168]	; (8000f08 <_vfiprintf_r+0x228>)
 8000e60:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000e64:	2206      	movs	r2, #6
 8000e66:	f7ff f9bb 	bl	80001e0 <memchr>
 8000e6a:	2800      	cmp	r0, #0
 8000e6c:	d03f      	beq.n	8000eee <_vfiprintf_r+0x20e>
 8000e6e:	4b27      	ldr	r3, [pc, #156]	; (8000f0c <_vfiprintf_r+0x22c>)
 8000e70:	bb1b      	cbnz	r3, 8000eba <_vfiprintf_r+0x1da>
 8000e72:	9b03      	ldr	r3, [sp, #12]
 8000e74:	3307      	adds	r3, #7
 8000e76:	f023 0307 	bic.w	r3, r3, #7
 8000e7a:	3308      	adds	r3, #8
 8000e7c:	9303      	str	r3, [sp, #12]
 8000e7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000e80:	443b      	add	r3, r7
 8000e82:	9309      	str	r3, [sp, #36]	; 0x24
 8000e84:	e768      	b.n	8000d58 <_vfiprintf_r+0x78>
 8000e86:	fb0c 3202 	mla	r2, ip, r2, r3
 8000e8a:	460c      	mov	r4, r1
 8000e8c:	2001      	movs	r0, #1
 8000e8e:	e7a6      	b.n	8000dde <_vfiprintf_r+0xfe>
 8000e90:	2300      	movs	r3, #0
 8000e92:	3401      	adds	r4, #1
 8000e94:	9305      	str	r3, [sp, #20]
 8000e96:	4619      	mov	r1, r3
 8000e98:	f04f 0c0a 	mov.w	ip, #10
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000ea2:	3a30      	subs	r2, #48	; 0x30
 8000ea4:	2a09      	cmp	r2, #9
 8000ea6:	d903      	bls.n	8000eb0 <_vfiprintf_r+0x1d0>
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d0c6      	beq.n	8000e3a <_vfiprintf_r+0x15a>
 8000eac:	9105      	str	r1, [sp, #20]
 8000eae:	e7c4      	b.n	8000e3a <_vfiprintf_r+0x15a>
 8000eb0:	fb0c 2101 	mla	r1, ip, r1, r2
 8000eb4:	4604      	mov	r4, r0
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e7f0      	b.n	8000e9c <_vfiprintf_r+0x1bc>
 8000eba:	ab03      	add	r3, sp, #12
 8000ebc:	9300      	str	r3, [sp, #0]
 8000ebe:	462a      	mov	r2, r5
 8000ec0:	4b13      	ldr	r3, [pc, #76]	; (8000f10 <_vfiprintf_r+0x230>)
 8000ec2:	a904      	add	r1, sp, #16
 8000ec4:	4630      	mov	r0, r6
 8000ec6:	f3af 8000 	nop.w
 8000eca:	4607      	mov	r7, r0
 8000ecc:	1c78      	adds	r0, r7, #1
 8000ece:	d1d6      	bne.n	8000e7e <_vfiprintf_r+0x19e>
 8000ed0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000ed2:	07d9      	lsls	r1, r3, #31
 8000ed4:	d405      	bmi.n	8000ee2 <_vfiprintf_r+0x202>
 8000ed6:	89ab      	ldrh	r3, [r5, #12]
 8000ed8:	059a      	lsls	r2, r3, #22
 8000eda:	d402      	bmi.n	8000ee2 <_vfiprintf_r+0x202>
 8000edc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000ede:	f7ff fdb9 	bl	8000a54 <__retarget_lock_release_recursive>
 8000ee2:	89ab      	ldrh	r3, [r5, #12]
 8000ee4:	065b      	lsls	r3, r3, #25
 8000ee6:	f53f af1d 	bmi.w	8000d24 <_vfiprintf_r+0x44>
 8000eea:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000eec:	e71c      	b.n	8000d28 <_vfiprintf_r+0x48>
 8000eee:	ab03      	add	r3, sp, #12
 8000ef0:	9300      	str	r3, [sp, #0]
 8000ef2:	462a      	mov	r2, r5
 8000ef4:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <_vfiprintf_r+0x230>)
 8000ef6:	a904      	add	r1, sp, #16
 8000ef8:	4630      	mov	r0, r6
 8000efa:	f000 f879 	bl	8000ff0 <_printf_i>
 8000efe:	e7e4      	b.n	8000eca <_vfiprintf_r+0x1ea>
 8000f00:	0800181e 	.word	0x0800181e
 8000f04:	08001824 	.word	0x08001824
 8000f08:	08001828 	.word	0x08001828
 8000f0c:	00000000 	.word	0x00000000
 8000f10:	08000cbb 	.word	0x08000cbb

08000f14 <_printf_common>:
 8000f14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f18:	4616      	mov	r6, r2
 8000f1a:	4699      	mov	r9, r3
 8000f1c:	688a      	ldr	r2, [r1, #8]
 8000f1e:	690b      	ldr	r3, [r1, #16]
 8000f20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000f24:	4293      	cmp	r3, r2
 8000f26:	bfb8      	it	lt
 8000f28:	4613      	movlt	r3, r2
 8000f2a:	6033      	str	r3, [r6, #0]
 8000f2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000f30:	4607      	mov	r7, r0
 8000f32:	460c      	mov	r4, r1
 8000f34:	b10a      	cbz	r2, 8000f3a <_printf_common+0x26>
 8000f36:	3301      	adds	r3, #1
 8000f38:	6033      	str	r3, [r6, #0]
 8000f3a:	6823      	ldr	r3, [r4, #0]
 8000f3c:	0699      	lsls	r1, r3, #26
 8000f3e:	bf42      	ittt	mi
 8000f40:	6833      	ldrmi	r3, [r6, #0]
 8000f42:	3302      	addmi	r3, #2
 8000f44:	6033      	strmi	r3, [r6, #0]
 8000f46:	6825      	ldr	r5, [r4, #0]
 8000f48:	f015 0506 	ands.w	r5, r5, #6
 8000f4c:	d106      	bne.n	8000f5c <_printf_common+0x48>
 8000f4e:	f104 0a19 	add.w	sl, r4, #25
 8000f52:	68e3      	ldr	r3, [r4, #12]
 8000f54:	6832      	ldr	r2, [r6, #0]
 8000f56:	1a9b      	subs	r3, r3, r2
 8000f58:	42ab      	cmp	r3, r5
 8000f5a:	dc26      	bgt.n	8000faa <_printf_common+0x96>
 8000f5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000f60:	1e13      	subs	r3, r2, #0
 8000f62:	6822      	ldr	r2, [r4, #0]
 8000f64:	bf18      	it	ne
 8000f66:	2301      	movne	r3, #1
 8000f68:	0692      	lsls	r2, r2, #26
 8000f6a:	d42b      	bmi.n	8000fc4 <_printf_common+0xb0>
 8000f6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000f70:	4649      	mov	r1, r9
 8000f72:	4638      	mov	r0, r7
 8000f74:	47c0      	blx	r8
 8000f76:	3001      	adds	r0, #1
 8000f78:	d01e      	beq.n	8000fb8 <_printf_common+0xa4>
 8000f7a:	6823      	ldr	r3, [r4, #0]
 8000f7c:	6922      	ldr	r2, [r4, #16]
 8000f7e:	f003 0306 	and.w	r3, r3, #6
 8000f82:	2b04      	cmp	r3, #4
 8000f84:	bf02      	ittt	eq
 8000f86:	68e5      	ldreq	r5, [r4, #12]
 8000f88:	6833      	ldreq	r3, [r6, #0]
 8000f8a:	1aed      	subeq	r5, r5, r3
 8000f8c:	68a3      	ldr	r3, [r4, #8]
 8000f8e:	bf0c      	ite	eq
 8000f90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000f94:	2500      	movne	r5, #0
 8000f96:	4293      	cmp	r3, r2
 8000f98:	bfc4      	itt	gt
 8000f9a:	1a9b      	subgt	r3, r3, r2
 8000f9c:	18ed      	addgt	r5, r5, r3
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	341a      	adds	r4, #26
 8000fa2:	42b5      	cmp	r5, r6
 8000fa4:	d11a      	bne.n	8000fdc <_printf_common+0xc8>
 8000fa6:	2000      	movs	r0, #0
 8000fa8:	e008      	b.n	8000fbc <_printf_common+0xa8>
 8000faa:	2301      	movs	r3, #1
 8000fac:	4652      	mov	r2, sl
 8000fae:	4649      	mov	r1, r9
 8000fb0:	4638      	mov	r0, r7
 8000fb2:	47c0      	blx	r8
 8000fb4:	3001      	adds	r0, #1
 8000fb6:	d103      	bne.n	8000fc0 <_printf_common+0xac>
 8000fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fc0:	3501      	adds	r5, #1
 8000fc2:	e7c6      	b.n	8000f52 <_printf_common+0x3e>
 8000fc4:	18e1      	adds	r1, r4, r3
 8000fc6:	1c5a      	adds	r2, r3, #1
 8000fc8:	2030      	movs	r0, #48	; 0x30
 8000fca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000fce:	4422      	add	r2, r4
 8000fd0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000fd4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000fd8:	3302      	adds	r3, #2
 8000fda:	e7c7      	b.n	8000f6c <_printf_common+0x58>
 8000fdc:	2301      	movs	r3, #1
 8000fde:	4622      	mov	r2, r4
 8000fe0:	4649      	mov	r1, r9
 8000fe2:	4638      	mov	r0, r7
 8000fe4:	47c0      	blx	r8
 8000fe6:	3001      	adds	r0, #1
 8000fe8:	d0e6      	beq.n	8000fb8 <_printf_common+0xa4>
 8000fea:	3601      	adds	r6, #1
 8000fec:	e7d9      	b.n	8000fa2 <_printf_common+0x8e>
	...

08000ff0 <_printf_i>:
 8000ff0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000ff4:	7e0f      	ldrb	r7, [r1, #24]
 8000ff6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000ff8:	2f78      	cmp	r7, #120	; 0x78
 8000ffa:	4691      	mov	r9, r2
 8000ffc:	4680      	mov	r8, r0
 8000ffe:	460c      	mov	r4, r1
 8001000:	469a      	mov	sl, r3
 8001002:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001006:	d807      	bhi.n	8001018 <_printf_i+0x28>
 8001008:	2f62      	cmp	r7, #98	; 0x62
 800100a:	d80a      	bhi.n	8001022 <_printf_i+0x32>
 800100c:	2f00      	cmp	r7, #0
 800100e:	f000 80d4 	beq.w	80011ba <_printf_i+0x1ca>
 8001012:	2f58      	cmp	r7, #88	; 0x58
 8001014:	f000 80c0 	beq.w	8001198 <_printf_i+0x1a8>
 8001018:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800101c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001020:	e03a      	b.n	8001098 <_printf_i+0xa8>
 8001022:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001026:	2b15      	cmp	r3, #21
 8001028:	d8f6      	bhi.n	8001018 <_printf_i+0x28>
 800102a:	a101      	add	r1, pc, #4	; (adr r1, 8001030 <_printf_i+0x40>)
 800102c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001030:	08001089 	.word	0x08001089
 8001034:	0800109d 	.word	0x0800109d
 8001038:	08001019 	.word	0x08001019
 800103c:	08001019 	.word	0x08001019
 8001040:	08001019 	.word	0x08001019
 8001044:	08001019 	.word	0x08001019
 8001048:	0800109d 	.word	0x0800109d
 800104c:	08001019 	.word	0x08001019
 8001050:	08001019 	.word	0x08001019
 8001054:	08001019 	.word	0x08001019
 8001058:	08001019 	.word	0x08001019
 800105c:	080011a1 	.word	0x080011a1
 8001060:	080010c9 	.word	0x080010c9
 8001064:	0800115b 	.word	0x0800115b
 8001068:	08001019 	.word	0x08001019
 800106c:	08001019 	.word	0x08001019
 8001070:	080011c3 	.word	0x080011c3
 8001074:	08001019 	.word	0x08001019
 8001078:	080010c9 	.word	0x080010c9
 800107c:	08001019 	.word	0x08001019
 8001080:	08001019 	.word	0x08001019
 8001084:	08001163 	.word	0x08001163
 8001088:	682b      	ldr	r3, [r5, #0]
 800108a:	1d1a      	adds	r2, r3, #4
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	602a      	str	r2, [r5, #0]
 8001090:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001094:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001098:	2301      	movs	r3, #1
 800109a:	e09f      	b.n	80011dc <_printf_i+0x1ec>
 800109c:	6820      	ldr	r0, [r4, #0]
 800109e:	682b      	ldr	r3, [r5, #0]
 80010a0:	0607      	lsls	r7, r0, #24
 80010a2:	f103 0104 	add.w	r1, r3, #4
 80010a6:	6029      	str	r1, [r5, #0]
 80010a8:	d501      	bpl.n	80010ae <_printf_i+0xbe>
 80010aa:	681e      	ldr	r6, [r3, #0]
 80010ac:	e003      	b.n	80010b6 <_printf_i+0xc6>
 80010ae:	0646      	lsls	r6, r0, #25
 80010b0:	d5fb      	bpl.n	80010aa <_printf_i+0xba>
 80010b2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80010b6:	2e00      	cmp	r6, #0
 80010b8:	da03      	bge.n	80010c2 <_printf_i+0xd2>
 80010ba:	232d      	movs	r3, #45	; 0x2d
 80010bc:	4276      	negs	r6, r6
 80010be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80010c2:	485a      	ldr	r0, [pc, #360]	; (800122c <_printf_i+0x23c>)
 80010c4:	230a      	movs	r3, #10
 80010c6:	e012      	b.n	80010ee <_printf_i+0xfe>
 80010c8:	682b      	ldr	r3, [r5, #0]
 80010ca:	6820      	ldr	r0, [r4, #0]
 80010cc:	1d19      	adds	r1, r3, #4
 80010ce:	6029      	str	r1, [r5, #0]
 80010d0:	0605      	lsls	r5, r0, #24
 80010d2:	d501      	bpl.n	80010d8 <_printf_i+0xe8>
 80010d4:	681e      	ldr	r6, [r3, #0]
 80010d6:	e002      	b.n	80010de <_printf_i+0xee>
 80010d8:	0641      	lsls	r1, r0, #25
 80010da:	d5fb      	bpl.n	80010d4 <_printf_i+0xe4>
 80010dc:	881e      	ldrh	r6, [r3, #0]
 80010de:	4853      	ldr	r0, [pc, #332]	; (800122c <_printf_i+0x23c>)
 80010e0:	2f6f      	cmp	r7, #111	; 0x6f
 80010e2:	bf0c      	ite	eq
 80010e4:	2308      	moveq	r3, #8
 80010e6:	230a      	movne	r3, #10
 80010e8:	2100      	movs	r1, #0
 80010ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80010ee:	6865      	ldr	r5, [r4, #4]
 80010f0:	60a5      	str	r5, [r4, #8]
 80010f2:	2d00      	cmp	r5, #0
 80010f4:	bfa2      	ittt	ge
 80010f6:	6821      	ldrge	r1, [r4, #0]
 80010f8:	f021 0104 	bicge.w	r1, r1, #4
 80010fc:	6021      	strge	r1, [r4, #0]
 80010fe:	b90e      	cbnz	r6, 8001104 <_printf_i+0x114>
 8001100:	2d00      	cmp	r5, #0
 8001102:	d04b      	beq.n	800119c <_printf_i+0x1ac>
 8001104:	4615      	mov	r5, r2
 8001106:	fbb6 f1f3 	udiv	r1, r6, r3
 800110a:	fb03 6711 	mls	r7, r3, r1, r6
 800110e:	5dc7      	ldrb	r7, [r0, r7]
 8001110:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001114:	4637      	mov	r7, r6
 8001116:	42bb      	cmp	r3, r7
 8001118:	460e      	mov	r6, r1
 800111a:	d9f4      	bls.n	8001106 <_printf_i+0x116>
 800111c:	2b08      	cmp	r3, #8
 800111e:	d10b      	bne.n	8001138 <_printf_i+0x148>
 8001120:	6823      	ldr	r3, [r4, #0]
 8001122:	07de      	lsls	r6, r3, #31
 8001124:	d508      	bpl.n	8001138 <_printf_i+0x148>
 8001126:	6923      	ldr	r3, [r4, #16]
 8001128:	6861      	ldr	r1, [r4, #4]
 800112a:	4299      	cmp	r1, r3
 800112c:	bfde      	ittt	le
 800112e:	2330      	movle	r3, #48	; 0x30
 8001130:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001134:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001138:	1b52      	subs	r2, r2, r5
 800113a:	6122      	str	r2, [r4, #16]
 800113c:	f8cd a000 	str.w	sl, [sp]
 8001140:	464b      	mov	r3, r9
 8001142:	aa03      	add	r2, sp, #12
 8001144:	4621      	mov	r1, r4
 8001146:	4640      	mov	r0, r8
 8001148:	f7ff fee4 	bl	8000f14 <_printf_common>
 800114c:	3001      	adds	r0, #1
 800114e:	d14a      	bne.n	80011e6 <_printf_i+0x1f6>
 8001150:	f04f 30ff 	mov.w	r0, #4294967295
 8001154:	b004      	add	sp, #16
 8001156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800115a:	6823      	ldr	r3, [r4, #0]
 800115c:	f043 0320 	orr.w	r3, r3, #32
 8001160:	6023      	str	r3, [r4, #0]
 8001162:	4833      	ldr	r0, [pc, #204]	; (8001230 <_printf_i+0x240>)
 8001164:	2778      	movs	r7, #120	; 0x78
 8001166:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800116a:	6823      	ldr	r3, [r4, #0]
 800116c:	6829      	ldr	r1, [r5, #0]
 800116e:	061f      	lsls	r7, r3, #24
 8001170:	f851 6b04 	ldr.w	r6, [r1], #4
 8001174:	d402      	bmi.n	800117c <_printf_i+0x18c>
 8001176:	065f      	lsls	r7, r3, #25
 8001178:	bf48      	it	mi
 800117a:	b2b6      	uxthmi	r6, r6
 800117c:	07df      	lsls	r7, r3, #31
 800117e:	bf48      	it	mi
 8001180:	f043 0320 	orrmi.w	r3, r3, #32
 8001184:	6029      	str	r1, [r5, #0]
 8001186:	bf48      	it	mi
 8001188:	6023      	strmi	r3, [r4, #0]
 800118a:	b91e      	cbnz	r6, 8001194 <_printf_i+0x1a4>
 800118c:	6823      	ldr	r3, [r4, #0]
 800118e:	f023 0320 	bic.w	r3, r3, #32
 8001192:	6023      	str	r3, [r4, #0]
 8001194:	2310      	movs	r3, #16
 8001196:	e7a7      	b.n	80010e8 <_printf_i+0xf8>
 8001198:	4824      	ldr	r0, [pc, #144]	; (800122c <_printf_i+0x23c>)
 800119a:	e7e4      	b.n	8001166 <_printf_i+0x176>
 800119c:	4615      	mov	r5, r2
 800119e:	e7bd      	b.n	800111c <_printf_i+0x12c>
 80011a0:	682b      	ldr	r3, [r5, #0]
 80011a2:	6826      	ldr	r6, [r4, #0]
 80011a4:	6961      	ldr	r1, [r4, #20]
 80011a6:	1d18      	adds	r0, r3, #4
 80011a8:	6028      	str	r0, [r5, #0]
 80011aa:	0635      	lsls	r5, r6, #24
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	d501      	bpl.n	80011b4 <_printf_i+0x1c4>
 80011b0:	6019      	str	r1, [r3, #0]
 80011b2:	e002      	b.n	80011ba <_printf_i+0x1ca>
 80011b4:	0670      	lsls	r0, r6, #25
 80011b6:	d5fb      	bpl.n	80011b0 <_printf_i+0x1c0>
 80011b8:	8019      	strh	r1, [r3, #0]
 80011ba:	2300      	movs	r3, #0
 80011bc:	6123      	str	r3, [r4, #16]
 80011be:	4615      	mov	r5, r2
 80011c0:	e7bc      	b.n	800113c <_printf_i+0x14c>
 80011c2:	682b      	ldr	r3, [r5, #0]
 80011c4:	1d1a      	adds	r2, r3, #4
 80011c6:	602a      	str	r2, [r5, #0]
 80011c8:	681d      	ldr	r5, [r3, #0]
 80011ca:	6862      	ldr	r2, [r4, #4]
 80011cc:	2100      	movs	r1, #0
 80011ce:	4628      	mov	r0, r5
 80011d0:	f7ff f806 	bl	80001e0 <memchr>
 80011d4:	b108      	cbz	r0, 80011da <_printf_i+0x1ea>
 80011d6:	1b40      	subs	r0, r0, r5
 80011d8:	6060      	str	r0, [r4, #4]
 80011da:	6863      	ldr	r3, [r4, #4]
 80011dc:	6123      	str	r3, [r4, #16]
 80011de:	2300      	movs	r3, #0
 80011e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80011e4:	e7aa      	b.n	800113c <_printf_i+0x14c>
 80011e6:	6923      	ldr	r3, [r4, #16]
 80011e8:	462a      	mov	r2, r5
 80011ea:	4649      	mov	r1, r9
 80011ec:	4640      	mov	r0, r8
 80011ee:	47d0      	blx	sl
 80011f0:	3001      	adds	r0, #1
 80011f2:	d0ad      	beq.n	8001150 <_printf_i+0x160>
 80011f4:	6823      	ldr	r3, [r4, #0]
 80011f6:	079b      	lsls	r3, r3, #30
 80011f8:	d413      	bmi.n	8001222 <_printf_i+0x232>
 80011fa:	68e0      	ldr	r0, [r4, #12]
 80011fc:	9b03      	ldr	r3, [sp, #12]
 80011fe:	4298      	cmp	r0, r3
 8001200:	bfb8      	it	lt
 8001202:	4618      	movlt	r0, r3
 8001204:	e7a6      	b.n	8001154 <_printf_i+0x164>
 8001206:	2301      	movs	r3, #1
 8001208:	4632      	mov	r2, r6
 800120a:	4649      	mov	r1, r9
 800120c:	4640      	mov	r0, r8
 800120e:	47d0      	blx	sl
 8001210:	3001      	adds	r0, #1
 8001212:	d09d      	beq.n	8001150 <_printf_i+0x160>
 8001214:	3501      	adds	r5, #1
 8001216:	68e3      	ldr	r3, [r4, #12]
 8001218:	9903      	ldr	r1, [sp, #12]
 800121a:	1a5b      	subs	r3, r3, r1
 800121c:	42ab      	cmp	r3, r5
 800121e:	dcf2      	bgt.n	8001206 <_printf_i+0x216>
 8001220:	e7eb      	b.n	80011fa <_printf_i+0x20a>
 8001222:	2500      	movs	r5, #0
 8001224:	f104 0619 	add.w	r6, r4, #25
 8001228:	e7f5      	b.n	8001216 <_printf_i+0x226>
 800122a:	bf00      	nop
 800122c:	0800182f 	.word	0x0800182f
 8001230:	08001840 	.word	0x08001840

08001234 <__sflush_r>:
 8001234:	898a      	ldrh	r2, [r1, #12]
 8001236:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001238:	4605      	mov	r5, r0
 800123a:	0710      	lsls	r0, r2, #28
 800123c:	460c      	mov	r4, r1
 800123e:	d457      	bmi.n	80012f0 <__sflush_r+0xbc>
 8001240:	684b      	ldr	r3, [r1, #4]
 8001242:	2b00      	cmp	r3, #0
 8001244:	dc04      	bgt.n	8001250 <__sflush_r+0x1c>
 8001246:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001248:	2b00      	cmp	r3, #0
 800124a:	dc01      	bgt.n	8001250 <__sflush_r+0x1c>
 800124c:	2000      	movs	r0, #0
 800124e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001250:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001252:	2e00      	cmp	r6, #0
 8001254:	d0fa      	beq.n	800124c <__sflush_r+0x18>
 8001256:	2300      	movs	r3, #0
 8001258:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800125c:	682f      	ldr	r7, [r5, #0]
 800125e:	6a21      	ldr	r1, [r4, #32]
 8001260:	602b      	str	r3, [r5, #0]
 8001262:	d032      	beq.n	80012ca <__sflush_r+0x96>
 8001264:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001266:	89a3      	ldrh	r3, [r4, #12]
 8001268:	075a      	lsls	r2, r3, #29
 800126a:	d505      	bpl.n	8001278 <__sflush_r+0x44>
 800126c:	6863      	ldr	r3, [r4, #4]
 800126e:	1ac0      	subs	r0, r0, r3
 8001270:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001272:	b10b      	cbz	r3, 8001278 <__sflush_r+0x44>
 8001274:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001276:	1ac0      	subs	r0, r0, r3
 8001278:	2300      	movs	r3, #0
 800127a:	4602      	mov	r2, r0
 800127c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800127e:	6a21      	ldr	r1, [r4, #32]
 8001280:	4628      	mov	r0, r5
 8001282:	47b0      	blx	r6
 8001284:	1c43      	adds	r3, r0, #1
 8001286:	89a3      	ldrh	r3, [r4, #12]
 8001288:	d106      	bne.n	8001298 <__sflush_r+0x64>
 800128a:	6829      	ldr	r1, [r5, #0]
 800128c:	291d      	cmp	r1, #29
 800128e:	d82b      	bhi.n	80012e8 <__sflush_r+0xb4>
 8001290:	4a28      	ldr	r2, [pc, #160]	; (8001334 <__sflush_r+0x100>)
 8001292:	410a      	asrs	r2, r1
 8001294:	07d6      	lsls	r6, r2, #31
 8001296:	d427      	bmi.n	80012e8 <__sflush_r+0xb4>
 8001298:	2200      	movs	r2, #0
 800129a:	6062      	str	r2, [r4, #4]
 800129c:	04d9      	lsls	r1, r3, #19
 800129e:	6922      	ldr	r2, [r4, #16]
 80012a0:	6022      	str	r2, [r4, #0]
 80012a2:	d504      	bpl.n	80012ae <__sflush_r+0x7a>
 80012a4:	1c42      	adds	r2, r0, #1
 80012a6:	d101      	bne.n	80012ac <__sflush_r+0x78>
 80012a8:	682b      	ldr	r3, [r5, #0]
 80012aa:	b903      	cbnz	r3, 80012ae <__sflush_r+0x7a>
 80012ac:	6560      	str	r0, [r4, #84]	; 0x54
 80012ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80012b0:	602f      	str	r7, [r5, #0]
 80012b2:	2900      	cmp	r1, #0
 80012b4:	d0ca      	beq.n	800124c <__sflush_r+0x18>
 80012b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80012ba:	4299      	cmp	r1, r3
 80012bc:	d002      	beq.n	80012c4 <__sflush_r+0x90>
 80012be:	4628      	mov	r0, r5
 80012c0:	f7ff fbe8 	bl	8000a94 <_free_r>
 80012c4:	2000      	movs	r0, #0
 80012c6:	6360      	str	r0, [r4, #52]	; 0x34
 80012c8:	e7c1      	b.n	800124e <__sflush_r+0x1a>
 80012ca:	2301      	movs	r3, #1
 80012cc:	4628      	mov	r0, r5
 80012ce:	47b0      	blx	r6
 80012d0:	1c41      	adds	r1, r0, #1
 80012d2:	d1c8      	bne.n	8001266 <__sflush_r+0x32>
 80012d4:	682b      	ldr	r3, [r5, #0]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d0c5      	beq.n	8001266 <__sflush_r+0x32>
 80012da:	2b1d      	cmp	r3, #29
 80012dc:	d001      	beq.n	80012e2 <__sflush_r+0xae>
 80012de:	2b16      	cmp	r3, #22
 80012e0:	d101      	bne.n	80012e6 <__sflush_r+0xb2>
 80012e2:	602f      	str	r7, [r5, #0]
 80012e4:	e7b2      	b.n	800124c <__sflush_r+0x18>
 80012e6:	89a3      	ldrh	r3, [r4, #12]
 80012e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012ec:	81a3      	strh	r3, [r4, #12]
 80012ee:	e7ae      	b.n	800124e <__sflush_r+0x1a>
 80012f0:	690f      	ldr	r7, [r1, #16]
 80012f2:	2f00      	cmp	r7, #0
 80012f4:	d0aa      	beq.n	800124c <__sflush_r+0x18>
 80012f6:	0793      	lsls	r3, r2, #30
 80012f8:	680e      	ldr	r6, [r1, #0]
 80012fa:	bf08      	it	eq
 80012fc:	694b      	ldreq	r3, [r1, #20]
 80012fe:	600f      	str	r7, [r1, #0]
 8001300:	bf18      	it	ne
 8001302:	2300      	movne	r3, #0
 8001304:	1bf6      	subs	r6, r6, r7
 8001306:	608b      	str	r3, [r1, #8]
 8001308:	2e00      	cmp	r6, #0
 800130a:	dd9f      	ble.n	800124c <__sflush_r+0x18>
 800130c:	6a21      	ldr	r1, [r4, #32]
 800130e:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8001312:	4633      	mov	r3, r6
 8001314:	463a      	mov	r2, r7
 8001316:	4628      	mov	r0, r5
 8001318:	47e0      	blx	ip
 800131a:	2800      	cmp	r0, #0
 800131c:	dc06      	bgt.n	800132c <__sflush_r+0xf8>
 800131e:	89a3      	ldrh	r3, [r4, #12]
 8001320:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001324:	81a3      	strh	r3, [r4, #12]
 8001326:	f04f 30ff 	mov.w	r0, #4294967295
 800132a:	e790      	b.n	800124e <__sflush_r+0x1a>
 800132c:	4407      	add	r7, r0
 800132e:	1a36      	subs	r6, r6, r0
 8001330:	e7ea      	b.n	8001308 <__sflush_r+0xd4>
 8001332:	bf00      	nop
 8001334:	dfbffffe 	.word	0xdfbffffe

08001338 <_fflush_r>:
 8001338:	b538      	push	{r3, r4, r5, lr}
 800133a:	690b      	ldr	r3, [r1, #16]
 800133c:	4605      	mov	r5, r0
 800133e:	460c      	mov	r4, r1
 8001340:	b913      	cbnz	r3, 8001348 <_fflush_r+0x10>
 8001342:	2500      	movs	r5, #0
 8001344:	4628      	mov	r0, r5
 8001346:	bd38      	pop	{r3, r4, r5, pc}
 8001348:	b118      	cbz	r0, 8001352 <_fflush_r+0x1a>
 800134a:	6a03      	ldr	r3, [r0, #32]
 800134c:	b90b      	cbnz	r3, 8001352 <_fflush_r+0x1a>
 800134e:	f7ff fa73 	bl	8000838 <__sinit>
 8001352:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d0f3      	beq.n	8001342 <_fflush_r+0xa>
 800135a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800135c:	07d0      	lsls	r0, r2, #31
 800135e:	d404      	bmi.n	800136a <_fflush_r+0x32>
 8001360:	0599      	lsls	r1, r3, #22
 8001362:	d402      	bmi.n	800136a <_fflush_r+0x32>
 8001364:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001366:	f7ff fb74 	bl	8000a52 <__retarget_lock_acquire_recursive>
 800136a:	4628      	mov	r0, r5
 800136c:	4621      	mov	r1, r4
 800136e:	f7ff ff61 	bl	8001234 <__sflush_r>
 8001372:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001374:	07da      	lsls	r2, r3, #31
 8001376:	4605      	mov	r5, r0
 8001378:	d4e4      	bmi.n	8001344 <_fflush_r+0xc>
 800137a:	89a3      	ldrh	r3, [r4, #12]
 800137c:	059b      	lsls	r3, r3, #22
 800137e:	d4e1      	bmi.n	8001344 <_fflush_r+0xc>
 8001380:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001382:	f7ff fb67 	bl	8000a54 <__retarget_lock_release_recursive>
 8001386:	e7dd      	b.n	8001344 <_fflush_r+0xc>

08001388 <fiprintf>:
 8001388:	b40e      	push	{r1, r2, r3}
 800138a:	b503      	push	{r0, r1, lr}
 800138c:	4601      	mov	r1, r0
 800138e:	ab03      	add	r3, sp, #12
 8001390:	4805      	ldr	r0, [pc, #20]	; (80013a8 <fiprintf+0x20>)
 8001392:	f853 2b04 	ldr.w	r2, [r3], #4
 8001396:	6800      	ldr	r0, [r0, #0]
 8001398:	9301      	str	r3, [sp, #4]
 800139a:	f7ff fca1 	bl	8000ce0 <_vfiprintf_r>
 800139e:	b002      	add	sp, #8
 80013a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80013a4:	b003      	add	sp, #12
 80013a6:	4770      	bx	lr
 80013a8:	200000a0 	.word	0x200000a0

080013ac <_putc_r>:
 80013ac:	b570      	push	{r4, r5, r6, lr}
 80013ae:	460d      	mov	r5, r1
 80013b0:	4614      	mov	r4, r2
 80013b2:	4606      	mov	r6, r0
 80013b4:	b118      	cbz	r0, 80013be <_putc_r+0x12>
 80013b6:	6a03      	ldr	r3, [r0, #32]
 80013b8:	b90b      	cbnz	r3, 80013be <_putc_r+0x12>
 80013ba:	f7ff fa3d 	bl	8000838 <__sinit>
 80013be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80013c0:	07d8      	lsls	r0, r3, #31
 80013c2:	d405      	bmi.n	80013d0 <_putc_r+0x24>
 80013c4:	89a3      	ldrh	r3, [r4, #12]
 80013c6:	0599      	lsls	r1, r3, #22
 80013c8:	d402      	bmi.n	80013d0 <_putc_r+0x24>
 80013ca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80013cc:	f7ff fb41 	bl	8000a52 <__retarget_lock_acquire_recursive>
 80013d0:	68a3      	ldr	r3, [r4, #8]
 80013d2:	3b01      	subs	r3, #1
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	60a3      	str	r3, [r4, #8]
 80013d8:	da05      	bge.n	80013e6 <_putc_r+0x3a>
 80013da:	69a2      	ldr	r2, [r4, #24]
 80013dc:	4293      	cmp	r3, r2
 80013de:	db12      	blt.n	8001406 <_putc_r+0x5a>
 80013e0:	b2eb      	uxtb	r3, r5
 80013e2:	2b0a      	cmp	r3, #10
 80013e4:	d00f      	beq.n	8001406 <_putc_r+0x5a>
 80013e6:	6823      	ldr	r3, [r4, #0]
 80013e8:	1c5a      	adds	r2, r3, #1
 80013ea:	6022      	str	r2, [r4, #0]
 80013ec:	701d      	strb	r5, [r3, #0]
 80013ee:	b2ed      	uxtb	r5, r5
 80013f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80013f2:	07da      	lsls	r2, r3, #31
 80013f4:	d405      	bmi.n	8001402 <_putc_r+0x56>
 80013f6:	89a3      	ldrh	r3, [r4, #12]
 80013f8:	059b      	lsls	r3, r3, #22
 80013fa:	d402      	bmi.n	8001402 <_putc_r+0x56>
 80013fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80013fe:	f7ff fb29 	bl	8000a54 <__retarget_lock_release_recursive>
 8001402:	4628      	mov	r0, r5
 8001404:	bd70      	pop	{r4, r5, r6, pc}
 8001406:	4629      	mov	r1, r5
 8001408:	4622      	mov	r2, r4
 800140a:	4630      	mov	r0, r6
 800140c:	f000 f802 	bl	8001414 <__swbuf_r>
 8001410:	4605      	mov	r5, r0
 8001412:	e7ed      	b.n	80013f0 <_putc_r+0x44>

08001414 <__swbuf_r>:
 8001414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001416:	460e      	mov	r6, r1
 8001418:	4614      	mov	r4, r2
 800141a:	4605      	mov	r5, r0
 800141c:	b118      	cbz	r0, 8001426 <__swbuf_r+0x12>
 800141e:	6a03      	ldr	r3, [r0, #32]
 8001420:	b90b      	cbnz	r3, 8001426 <__swbuf_r+0x12>
 8001422:	f7ff fa09 	bl	8000838 <__sinit>
 8001426:	69a3      	ldr	r3, [r4, #24]
 8001428:	60a3      	str	r3, [r4, #8]
 800142a:	89a3      	ldrh	r3, [r4, #12]
 800142c:	071a      	lsls	r2, r3, #28
 800142e:	d525      	bpl.n	800147c <__swbuf_r+0x68>
 8001430:	6923      	ldr	r3, [r4, #16]
 8001432:	b31b      	cbz	r3, 800147c <__swbuf_r+0x68>
 8001434:	6823      	ldr	r3, [r4, #0]
 8001436:	6922      	ldr	r2, [r4, #16]
 8001438:	1a98      	subs	r0, r3, r2
 800143a:	6963      	ldr	r3, [r4, #20]
 800143c:	b2f6      	uxtb	r6, r6
 800143e:	4283      	cmp	r3, r0
 8001440:	4637      	mov	r7, r6
 8001442:	dc04      	bgt.n	800144e <__swbuf_r+0x3a>
 8001444:	4621      	mov	r1, r4
 8001446:	4628      	mov	r0, r5
 8001448:	f7ff ff76 	bl	8001338 <_fflush_r>
 800144c:	b9e0      	cbnz	r0, 8001488 <__swbuf_r+0x74>
 800144e:	68a3      	ldr	r3, [r4, #8]
 8001450:	3b01      	subs	r3, #1
 8001452:	60a3      	str	r3, [r4, #8]
 8001454:	6823      	ldr	r3, [r4, #0]
 8001456:	1c5a      	adds	r2, r3, #1
 8001458:	6022      	str	r2, [r4, #0]
 800145a:	701e      	strb	r6, [r3, #0]
 800145c:	6962      	ldr	r2, [r4, #20]
 800145e:	1c43      	adds	r3, r0, #1
 8001460:	429a      	cmp	r2, r3
 8001462:	d004      	beq.n	800146e <__swbuf_r+0x5a>
 8001464:	89a3      	ldrh	r3, [r4, #12]
 8001466:	07db      	lsls	r3, r3, #31
 8001468:	d506      	bpl.n	8001478 <__swbuf_r+0x64>
 800146a:	2e0a      	cmp	r6, #10
 800146c:	d104      	bne.n	8001478 <__swbuf_r+0x64>
 800146e:	4621      	mov	r1, r4
 8001470:	4628      	mov	r0, r5
 8001472:	f7ff ff61 	bl	8001338 <_fflush_r>
 8001476:	b938      	cbnz	r0, 8001488 <__swbuf_r+0x74>
 8001478:	4638      	mov	r0, r7
 800147a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800147c:	4621      	mov	r1, r4
 800147e:	4628      	mov	r0, r5
 8001480:	f000 f806 	bl	8001490 <__swsetup_r>
 8001484:	2800      	cmp	r0, #0
 8001486:	d0d5      	beq.n	8001434 <__swbuf_r+0x20>
 8001488:	f04f 37ff 	mov.w	r7, #4294967295
 800148c:	e7f4      	b.n	8001478 <__swbuf_r+0x64>
	...

08001490 <__swsetup_r>:
 8001490:	b538      	push	{r3, r4, r5, lr}
 8001492:	4b2a      	ldr	r3, [pc, #168]	; (800153c <__swsetup_r+0xac>)
 8001494:	4605      	mov	r5, r0
 8001496:	6818      	ldr	r0, [r3, #0]
 8001498:	460c      	mov	r4, r1
 800149a:	b118      	cbz	r0, 80014a4 <__swsetup_r+0x14>
 800149c:	6a03      	ldr	r3, [r0, #32]
 800149e:	b90b      	cbnz	r3, 80014a4 <__swsetup_r+0x14>
 80014a0:	f7ff f9ca 	bl	8000838 <__sinit>
 80014a4:	89a3      	ldrh	r3, [r4, #12]
 80014a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80014aa:	0718      	lsls	r0, r3, #28
 80014ac:	d422      	bmi.n	80014f4 <__swsetup_r+0x64>
 80014ae:	06d9      	lsls	r1, r3, #27
 80014b0:	d407      	bmi.n	80014c2 <__swsetup_r+0x32>
 80014b2:	2309      	movs	r3, #9
 80014b4:	602b      	str	r3, [r5, #0]
 80014b6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80014ba:	81a3      	strh	r3, [r4, #12]
 80014bc:	f04f 30ff 	mov.w	r0, #4294967295
 80014c0:	e034      	b.n	800152c <__swsetup_r+0x9c>
 80014c2:	0758      	lsls	r0, r3, #29
 80014c4:	d512      	bpl.n	80014ec <__swsetup_r+0x5c>
 80014c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80014c8:	b141      	cbz	r1, 80014dc <__swsetup_r+0x4c>
 80014ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80014ce:	4299      	cmp	r1, r3
 80014d0:	d002      	beq.n	80014d8 <__swsetup_r+0x48>
 80014d2:	4628      	mov	r0, r5
 80014d4:	f7ff fade 	bl	8000a94 <_free_r>
 80014d8:	2300      	movs	r3, #0
 80014da:	6363      	str	r3, [r4, #52]	; 0x34
 80014dc:	89a3      	ldrh	r3, [r4, #12]
 80014de:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80014e2:	81a3      	strh	r3, [r4, #12]
 80014e4:	2300      	movs	r3, #0
 80014e6:	6063      	str	r3, [r4, #4]
 80014e8:	6923      	ldr	r3, [r4, #16]
 80014ea:	6023      	str	r3, [r4, #0]
 80014ec:	89a3      	ldrh	r3, [r4, #12]
 80014ee:	f043 0308 	orr.w	r3, r3, #8
 80014f2:	81a3      	strh	r3, [r4, #12]
 80014f4:	6923      	ldr	r3, [r4, #16]
 80014f6:	b94b      	cbnz	r3, 800150c <__swsetup_r+0x7c>
 80014f8:	89a3      	ldrh	r3, [r4, #12]
 80014fa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80014fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001502:	d003      	beq.n	800150c <__swsetup_r+0x7c>
 8001504:	4621      	mov	r1, r4
 8001506:	4628      	mov	r0, r5
 8001508:	f000 f857 	bl	80015ba <__smakebuf_r>
 800150c:	89a0      	ldrh	r0, [r4, #12]
 800150e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001512:	f010 0301 	ands.w	r3, r0, #1
 8001516:	d00a      	beq.n	800152e <__swsetup_r+0x9e>
 8001518:	2300      	movs	r3, #0
 800151a:	60a3      	str	r3, [r4, #8]
 800151c:	6963      	ldr	r3, [r4, #20]
 800151e:	425b      	negs	r3, r3
 8001520:	61a3      	str	r3, [r4, #24]
 8001522:	6923      	ldr	r3, [r4, #16]
 8001524:	b943      	cbnz	r3, 8001538 <__swsetup_r+0xa8>
 8001526:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800152a:	d1c4      	bne.n	80014b6 <__swsetup_r+0x26>
 800152c:	bd38      	pop	{r3, r4, r5, pc}
 800152e:	0781      	lsls	r1, r0, #30
 8001530:	bf58      	it	pl
 8001532:	6963      	ldrpl	r3, [r4, #20]
 8001534:	60a3      	str	r3, [r4, #8]
 8001536:	e7f4      	b.n	8001522 <__swsetup_r+0x92>
 8001538:	2000      	movs	r0, #0
 800153a:	e7f7      	b.n	800152c <__swsetup_r+0x9c>
 800153c:	200000a0 	.word	0x200000a0

08001540 <_sbrk_r>:
 8001540:	b538      	push	{r3, r4, r5, lr}
 8001542:	4d06      	ldr	r5, [pc, #24]	; (800155c <_sbrk_r+0x1c>)
 8001544:	2300      	movs	r3, #0
 8001546:	4604      	mov	r4, r0
 8001548:	4608      	mov	r0, r1
 800154a:	602b      	str	r3, [r5, #0]
 800154c:	f7ff f84a 	bl	80005e4 <_sbrk>
 8001550:	1c43      	adds	r3, r0, #1
 8001552:	d102      	bne.n	800155a <_sbrk_r+0x1a>
 8001554:	682b      	ldr	r3, [r5, #0]
 8001556:	b103      	cbz	r3, 800155a <_sbrk_r+0x1a>
 8001558:	6023      	str	r3, [r4, #0]
 800155a:	bd38      	pop	{r3, r4, r5, pc}
 800155c:	20000200 	.word	0x20000200

08001560 <abort>:
 8001560:	b508      	push	{r3, lr}
 8001562:	2006      	movs	r0, #6
 8001564:	f000 f88e 	bl	8001684 <raise>
 8001568:	2001      	movs	r0, #1
 800156a:	f7fe ffc8 	bl	80004fe <_exit>

0800156e <__swhatbuf_r>:
 800156e:	b570      	push	{r4, r5, r6, lr}
 8001570:	460c      	mov	r4, r1
 8001572:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001576:	2900      	cmp	r1, #0
 8001578:	b096      	sub	sp, #88	; 0x58
 800157a:	4615      	mov	r5, r2
 800157c:	461e      	mov	r6, r3
 800157e:	da0d      	bge.n	800159c <__swhatbuf_r+0x2e>
 8001580:	89a3      	ldrh	r3, [r4, #12]
 8001582:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001586:	f04f 0100 	mov.w	r1, #0
 800158a:	bf0c      	ite	eq
 800158c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8001590:	2340      	movne	r3, #64	; 0x40
 8001592:	2000      	movs	r0, #0
 8001594:	6031      	str	r1, [r6, #0]
 8001596:	602b      	str	r3, [r5, #0]
 8001598:	b016      	add	sp, #88	; 0x58
 800159a:	bd70      	pop	{r4, r5, r6, pc}
 800159c:	466a      	mov	r2, sp
 800159e:	f000 f879 	bl	8001694 <_fstat_r>
 80015a2:	2800      	cmp	r0, #0
 80015a4:	dbec      	blt.n	8001580 <__swhatbuf_r+0x12>
 80015a6:	9901      	ldr	r1, [sp, #4]
 80015a8:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80015ac:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80015b0:	4259      	negs	r1, r3
 80015b2:	4159      	adcs	r1, r3
 80015b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015b8:	e7eb      	b.n	8001592 <__swhatbuf_r+0x24>

080015ba <__smakebuf_r>:
 80015ba:	898b      	ldrh	r3, [r1, #12]
 80015bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80015be:	079d      	lsls	r5, r3, #30
 80015c0:	4606      	mov	r6, r0
 80015c2:	460c      	mov	r4, r1
 80015c4:	d507      	bpl.n	80015d6 <__smakebuf_r+0x1c>
 80015c6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80015ca:	6023      	str	r3, [r4, #0]
 80015cc:	6123      	str	r3, [r4, #16]
 80015ce:	2301      	movs	r3, #1
 80015d0:	6163      	str	r3, [r4, #20]
 80015d2:	b002      	add	sp, #8
 80015d4:	bd70      	pop	{r4, r5, r6, pc}
 80015d6:	ab01      	add	r3, sp, #4
 80015d8:	466a      	mov	r2, sp
 80015da:	f7ff ffc8 	bl	800156e <__swhatbuf_r>
 80015de:	9900      	ldr	r1, [sp, #0]
 80015e0:	4605      	mov	r5, r0
 80015e2:	4630      	mov	r0, r6
 80015e4:	f7ff fac8 	bl	8000b78 <_malloc_r>
 80015e8:	b948      	cbnz	r0, 80015fe <__smakebuf_r+0x44>
 80015ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80015ee:	059a      	lsls	r2, r3, #22
 80015f0:	d4ef      	bmi.n	80015d2 <__smakebuf_r+0x18>
 80015f2:	f023 0303 	bic.w	r3, r3, #3
 80015f6:	f043 0302 	orr.w	r3, r3, #2
 80015fa:	81a3      	strh	r3, [r4, #12]
 80015fc:	e7e3      	b.n	80015c6 <__smakebuf_r+0xc>
 80015fe:	89a3      	ldrh	r3, [r4, #12]
 8001600:	6020      	str	r0, [r4, #0]
 8001602:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001606:	81a3      	strh	r3, [r4, #12]
 8001608:	9b00      	ldr	r3, [sp, #0]
 800160a:	6163      	str	r3, [r4, #20]
 800160c:	9b01      	ldr	r3, [sp, #4]
 800160e:	6120      	str	r0, [r4, #16]
 8001610:	b15b      	cbz	r3, 800162a <__smakebuf_r+0x70>
 8001612:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001616:	4630      	mov	r0, r6
 8001618:	f000 f84e 	bl	80016b8 <_isatty_r>
 800161c:	b128      	cbz	r0, 800162a <__smakebuf_r+0x70>
 800161e:	89a3      	ldrh	r3, [r4, #12]
 8001620:	f023 0303 	bic.w	r3, r3, #3
 8001624:	f043 0301 	orr.w	r3, r3, #1
 8001628:	81a3      	strh	r3, [r4, #12]
 800162a:	89a3      	ldrh	r3, [r4, #12]
 800162c:	431d      	orrs	r5, r3
 800162e:	81a5      	strh	r5, [r4, #12]
 8001630:	e7cf      	b.n	80015d2 <__smakebuf_r+0x18>

08001632 <_raise_r>:
 8001632:	291f      	cmp	r1, #31
 8001634:	b538      	push	{r3, r4, r5, lr}
 8001636:	4604      	mov	r4, r0
 8001638:	460d      	mov	r5, r1
 800163a:	d904      	bls.n	8001646 <_raise_r+0x14>
 800163c:	2316      	movs	r3, #22
 800163e:	6003      	str	r3, [r0, #0]
 8001640:	f04f 30ff 	mov.w	r0, #4294967295
 8001644:	bd38      	pop	{r3, r4, r5, pc}
 8001646:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8001648:	b112      	cbz	r2, 8001650 <_raise_r+0x1e>
 800164a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800164e:	b94b      	cbnz	r3, 8001664 <_raise_r+0x32>
 8001650:	4620      	mov	r0, r4
 8001652:	f000 f853 	bl	80016fc <_getpid_r>
 8001656:	462a      	mov	r2, r5
 8001658:	4601      	mov	r1, r0
 800165a:	4620      	mov	r0, r4
 800165c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001660:	f000 b83a 	b.w	80016d8 <_kill_r>
 8001664:	2b01      	cmp	r3, #1
 8001666:	d00a      	beq.n	800167e <_raise_r+0x4c>
 8001668:	1c59      	adds	r1, r3, #1
 800166a:	d103      	bne.n	8001674 <_raise_r+0x42>
 800166c:	2316      	movs	r3, #22
 800166e:	6003      	str	r3, [r0, #0]
 8001670:	2001      	movs	r0, #1
 8001672:	e7e7      	b.n	8001644 <_raise_r+0x12>
 8001674:	2400      	movs	r4, #0
 8001676:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800167a:	4628      	mov	r0, r5
 800167c:	4798      	blx	r3
 800167e:	2000      	movs	r0, #0
 8001680:	e7e0      	b.n	8001644 <_raise_r+0x12>
	...

08001684 <raise>:
 8001684:	4b02      	ldr	r3, [pc, #8]	; (8001690 <raise+0xc>)
 8001686:	4601      	mov	r1, r0
 8001688:	6818      	ldr	r0, [r3, #0]
 800168a:	f7ff bfd2 	b.w	8001632 <_raise_r>
 800168e:	bf00      	nop
 8001690:	200000a0 	.word	0x200000a0

08001694 <_fstat_r>:
 8001694:	b538      	push	{r3, r4, r5, lr}
 8001696:	4d07      	ldr	r5, [pc, #28]	; (80016b4 <_fstat_r+0x20>)
 8001698:	2300      	movs	r3, #0
 800169a:	4604      	mov	r4, r0
 800169c:	4608      	mov	r0, r1
 800169e:	4611      	mov	r1, r2
 80016a0:	602b      	str	r3, [r5, #0]
 80016a2:	f7fe ff7a 	bl	800059a <_fstat>
 80016a6:	1c43      	adds	r3, r0, #1
 80016a8:	d102      	bne.n	80016b0 <_fstat_r+0x1c>
 80016aa:	682b      	ldr	r3, [r5, #0]
 80016ac:	b103      	cbz	r3, 80016b0 <_fstat_r+0x1c>
 80016ae:	6023      	str	r3, [r4, #0]
 80016b0:	bd38      	pop	{r3, r4, r5, pc}
 80016b2:	bf00      	nop
 80016b4:	20000200 	.word	0x20000200

080016b8 <_isatty_r>:
 80016b8:	b538      	push	{r3, r4, r5, lr}
 80016ba:	4d06      	ldr	r5, [pc, #24]	; (80016d4 <_isatty_r+0x1c>)
 80016bc:	2300      	movs	r3, #0
 80016be:	4604      	mov	r4, r0
 80016c0:	4608      	mov	r0, r1
 80016c2:	602b      	str	r3, [r5, #0]
 80016c4:	f7fe ff78 	bl	80005b8 <_isatty>
 80016c8:	1c43      	adds	r3, r0, #1
 80016ca:	d102      	bne.n	80016d2 <_isatty_r+0x1a>
 80016cc:	682b      	ldr	r3, [r5, #0]
 80016ce:	b103      	cbz	r3, 80016d2 <_isatty_r+0x1a>
 80016d0:	6023      	str	r3, [r4, #0]
 80016d2:	bd38      	pop	{r3, r4, r5, pc}
 80016d4:	20000200 	.word	0x20000200

080016d8 <_kill_r>:
 80016d8:	b538      	push	{r3, r4, r5, lr}
 80016da:	4d07      	ldr	r5, [pc, #28]	; (80016f8 <_kill_r+0x20>)
 80016dc:	2300      	movs	r3, #0
 80016de:	4604      	mov	r4, r0
 80016e0:	4608      	mov	r0, r1
 80016e2:	4611      	mov	r1, r2
 80016e4:	602b      	str	r3, [r5, #0]
 80016e6:	f7fe fefa 	bl	80004de <_kill>
 80016ea:	1c43      	adds	r3, r0, #1
 80016ec:	d102      	bne.n	80016f4 <_kill_r+0x1c>
 80016ee:	682b      	ldr	r3, [r5, #0]
 80016f0:	b103      	cbz	r3, 80016f4 <_kill_r+0x1c>
 80016f2:	6023      	str	r3, [r4, #0]
 80016f4:	bd38      	pop	{r3, r4, r5, pc}
 80016f6:	bf00      	nop
 80016f8:	20000200 	.word	0x20000200

080016fc <_getpid_r>:
 80016fc:	f7fe bee8 	b.w	80004d0 <_getpid>

08001700 <_init>:
 8001700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001702:	bf00      	nop
 8001704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001706:	bc08      	pop	{r3}
 8001708:	469e      	mov	lr, r3
 800170a:	4770      	bx	lr

0800170c <_fini>:
 800170c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800170e:	bf00      	nop
 8001710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001712:	bc08      	pop	{r3}
 8001714:	469e      	mov	lr, r3
 8001716:	4770      	bx	lr
