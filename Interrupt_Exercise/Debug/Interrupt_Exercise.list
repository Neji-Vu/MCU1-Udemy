
Interrupt_Exercise.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001bc  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000354  0800035c  0001035c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000354  08000354  0001035c  2**0
                  CONTENTS
  4 .ARM          00000000  08000354  08000354  0001035c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000354  0800035c  0001035c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000354  08000354  00010354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000358  08000358  00010358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001035c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  0800035c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  0800035c  00020020  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0001035c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010386  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000178  00000000  00000000  000103c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000000de  00000000  00000000  00010541  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000060  00000000  00000000  00010620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000003e  00000000  00000000  00010680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000f70  00000000  00000000  000106be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000004ff  00000000  00000000  0001162e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00003c5a  00000000  00000000  00011b2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000000bc  00000000  00000000  00015788  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  00015844  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800033c 	.word	0x0800033c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	0800033c 	.word	0x0800033c

080001d8 <set_priority>:
#define pISER_BASE 0xE000E100
#define pIPR_BASE 0xE000E400

uint8_t count = 0;

void set_priority(uint8_t IRQNO, uint8_t priortity_value){
 80001d8:	b480      	push	{r7}
 80001da:	b085      	sub	sp, #20
 80001dc:	af00      	add	r7, sp, #0
 80001de:	4603      	mov	r3, r0
 80001e0:	460a      	mov	r2, r1
 80001e2:	71fb      	strb	r3, [r7, #7]
 80001e4:	4613      	mov	r3, r2
 80001e6:	71bb      	strb	r3, [r7, #6]
	// Select the IPR register number
	uint32_t *pIPRx = (uint32_t*)pIPR_BASE + (IRQNO / 4);
 80001e8:	79fb      	ldrb	r3, [r7, #7]
 80001ea:	089b      	lsrs	r3, r3, #2
 80001ec:	b2db      	uxtb	r3, r3
 80001ee:	009b      	lsls	r3, r3, #2
 80001f0:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80001f4:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 80001f8:	60fb      	str	r3, [r7, #12]

	// Clear bit at IPR register
	//	*pIPRx &= ~(0xFF << ((IRQNO % 4) * 8));
	// Select the bit at IRQ number
	*pIPRx |= (priortity_value << ((IRQNO % 4) * 8));
 80001fa:	68fb      	ldr	r3, [r7, #12]
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	79b9      	ldrb	r1, [r7, #6]
 8000200:	79fa      	ldrb	r2, [r7, #7]
 8000202:	f002 0203 	and.w	r2, r2, #3
 8000206:	00d2      	lsls	r2, r2, #3
 8000208:	fa01 f202 	lsl.w	r2, r1, r2
 800020c:	431a      	orrs	r2, r3
 800020e:	68fb      	ldr	r3, [r7, #12]
 8000210:	601a      	str	r2, [r3, #0]
}
 8000212:	bf00      	nop
 8000214:	3714      	adds	r7, #20
 8000216:	46bd      	mov	sp, r7
 8000218:	bc80      	pop	{r7}
 800021a:	4770      	bx	lr

0800021c <main>:

int main(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b084      	sub	sp, #16
 8000220:	af00      	add	r7, sp, #0

	// Configure the priority for interrupts
	set_priority(IRQNO_USART2, 0x80);
 8000222:	2180      	movs	r1, #128	; 0x80
 8000224:	2026      	movs	r0, #38	; 0x26
 8000226:	f7ff ffd7 	bl	80001d8 <set_priority>
	set_priority(IRQNO_TIM5, 0x70);
 800022a:	2170      	movs	r1, #112	; 0x70
 800022c:	2032      	movs	r0, #50	; 0x32
 800022e:	f7ff ffd3 	bl	80001d8 <set_priority>


	// Enable Pending Register of USART2
	uint32_t *pISPR_USART2 = (uint32_t*)pISPR_BASE + (IRQNO_USART2 / 32);
 8000232:	4b0c      	ldr	r3, [pc, #48]	; (8000264 <main+0x48>)
 8000234:	60fb      	str	r3, [r7, #12]
	*pISPR_USART2 |= (1 << (IRQNO_USART2 % 32));
 8000236:	68fb      	ldr	r3, [r7, #12]
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	601a      	str	r2, [r3, #0]

	// Enable Pending Register of TIM5
	uint32_t *pISPR_TIM5 = (uint32_t*)pISPR_BASE + (IRQNO_TIM5 / 32);
 8000242:	4b08      	ldr	r3, [pc, #32]	; (8000264 <main+0x48>)
 8000244:	60bb      	str	r3, [r7, #8]
	*pISPR_TIM5 |= (1 << (IRQNO_TIM5 % 32));
 8000246:	68bb      	ldr	r3, [r7, #8]
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800024e:	68bb      	ldr	r3, [r7, #8]
 8000250:	601a      	str	r2, [r3, #0]


	// Enable Set-enable Register of USART2
	uint32_t *pISER_USART2 = (uint32_t*)pISER_BASE + (IRQNO_USART2 / 32);
 8000252:	4b05      	ldr	r3, [pc, #20]	; (8000268 <main+0x4c>)
 8000254:	607b      	str	r3, [r7, #4]
	*pISER_USART2 |= (1 << (IRQNO_USART2 % 32));
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	601a      	str	r2, [r3, #0]


    /* Loop forever */
	for(;;);
 8000262:	e7fe      	b.n	8000262 <main+0x46>
 8000264:	e000e204 	.word	0xe000e204
 8000268:	e000e104 	.word	0xe000e104

0800026c <USART2_IRQHandler>:
}


void USART2_IRQHandler(){
 800026c:	b480      	push	{r7}
 800026e:	af00      	add	r7, sp, #0
	count++;
 8000270:	4b04      	ldr	r3, [pc, #16]	; (8000284 <USART2_IRQHandler+0x18>)
 8000272:	781b      	ldrb	r3, [r3, #0]
 8000274:	3301      	adds	r3, #1
 8000276:	b2da      	uxtb	r2, r3
 8000278:	4b02      	ldr	r3, [pc, #8]	; (8000284 <USART2_IRQHandler+0x18>)
 800027a:	701a      	strb	r2, [r3, #0]
//	// Enable Set-enable Register of TIM5
//	uint32_t *pISER_TIM5 = (uint32_t*)pISER_BASE + (IRQNO_TIM5 / 32);
//	*pISER_TIM5 |= (1 << (IRQNO_TIM5 % 32));
//	while(1);
}
 800027c:	bf00      	nop
 800027e:	46bd      	mov	sp, r7
 8000280:	bc80      	pop	{r7}
 8000282:	4770      	bx	lr
 8000284:	2000001c 	.word	0x2000001c

08000288 <TIM5_IRQHandler>:

void TIM5_IRQHandler(){
 8000288:	b480      	push	{r7}
 800028a:	af00      	add	r7, sp, #0
	count++;
 800028c:	4b03      	ldr	r3, [pc, #12]	; (800029c <TIM5_IRQHandler+0x14>)
 800028e:	781b      	ldrb	r3, [r3, #0]
 8000290:	3301      	adds	r3, #1
 8000292:	b2da      	uxtb	r2, r3
 8000294:	4b01      	ldr	r3, [pc, #4]	; (800029c <TIM5_IRQHandler+0x14>)
 8000296:	701a      	strb	r2, [r3, #0]
	while(1);
 8000298:	e7fe      	b.n	8000298 <TIM5_IRQHandler+0x10>
 800029a:	bf00      	nop
 800029c:	2000001c 	.word	0x2000001c

080002a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002a0:	480d      	ldr	r0, [pc, #52]	; (80002d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002a2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002a4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002a8:	480c      	ldr	r0, [pc, #48]	; (80002dc <LoopForever+0x6>)
  ldr r1, =_edata
 80002aa:	490d      	ldr	r1, [pc, #52]	; (80002e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002ac:	4a0d      	ldr	r2, [pc, #52]	; (80002e4 <LoopForever+0xe>)
  movs r3, #0
 80002ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002b0:	e002      	b.n	80002b8 <LoopCopyDataInit>

080002b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002b6:	3304      	adds	r3, #4

080002b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002bc:	d3f9      	bcc.n	80002b2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002be:	4a0a      	ldr	r2, [pc, #40]	; (80002e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002c0:	4c0a      	ldr	r4, [pc, #40]	; (80002ec <LoopForever+0x16>)
  movs r3, #0
 80002c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002c4:	e001      	b.n	80002ca <LoopFillZerobss>

080002c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002c8:	3204      	adds	r2, #4

080002ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002cc:	d3fb      	bcc.n	80002c6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002ce:	f000 f811 	bl	80002f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002d2:	f7ff ffa3 	bl	800021c <main>

080002d6 <LoopForever>:

LoopForever:
  b LoopForever
 80002d6:	e7fe      	b.n	80002d6 <LoopForever>
  ldr   r0, =_estack
 80002d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002e0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002e4:	0800035c 	.word	0x0800035c
  ldr r2, =_sbss
 80002e8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002ec:	20000020 	.word	0x20000020

080002f0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002f0:	e7fe      	b.n	80002f0 <ADC_IRQHandler>
	...

080002f4 <__libc_init_array>:
 80002f4:	b570      	push	{r4, r5, r6, lr}
 80002f6:	4d0d      	ldr	r5, [pc, #52]	; (800032c <__libc_init_array+0x38>)
 80002f8:	4c0d      	ldr	r4, [pc, #52]	; (8000330 <__libc_init_array+0x3c>)
 80002fa:	1b64      	subs	r4, r4, r5
 80002fc:	10a4      	asrs	r4, r4, #2
 80002fe:	2600      	movs	r6, #0
 8000300:	42a6      	cmp	r6, r4
 8000302:	d109      	bne.n	8000318 <__libc_init_array+0x24>
 8000304:	4d0b      	ldr	r5, [pc, #44]	; (8000334 <__libc_init_array+0x40>)
 8000306:	4c0c      	ldr	r4, [pc, #48]	; (8000338 <__libc_init_array+0x44>)
 8000308:	f000 f818 	bl	800033c <_init>
 800030c:	1b64      	subs	r4, r4, r5
 800030e:	10a4      	asrs	r4, r4, #2
 8000310:	2600      	movs	r6, #0
 8000312:	42a6      	cmp	r6, r4
 8000314:	d105      	bne.n	8000322 <__libc_init_array+0x2e>
 8000316:	bd70      	pop	{r4, r5, r6, pc}
 8000318:	f855 3b04 	ldr.w	r3, [r5], #4
 800031c:	4798      	blx	r3
 800031e:	3601      	adds	r6, #1
 8000320:	e7ee      	b.n	8000300 <__libc_init_array+0xc>
 8000322:	f855 3b04 	ldr.w	r3, [r5], #4
 8000326:	4798      	blx	r3
 8000328:	3601      	adds	r6, #1
 800032a:	e7f2      	b.n	8000312 <__libc_init_array+0x1e>
 800032c:	08000354 	.word	0x08000354
 8000330:	08000354 	.word	0x08000354
 8000334:	08000354 	.word	0x08000354
 8000338:	08000358 	.word	0x08000358

0800033c <_init>:
 800033c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800033e:	bf00      	nop
 8000340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000342:	bc08      	pop	{r3}
 8000344:	469e      	mov	lr, r3
 8000346:	4770      	bx	lr

08000348 <_fini>:
 8000348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800034a:	bf00      	nop
 800034c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800034e:	bc08      	pop	{r3}
 8000350:	469e      	mov	lr, r3
 8000352:	4770      	bx	lr
